using System;
using System.Net;
using System.Threading.Tasks;

namespace NetSharp.Interfaces
{
    /// <summary>
    /// Describes a server capable of asynchronously handling multiple <see cref="IClient"/> connections at once.
    /// </summary>
    public interface IServer
    {
        /// <summary>
        /// Signifies that a connection with a remote endpoint has been made.
        /// </summary>
        public event Action<EndPoint>? ClientConnected;

        //protected IResponsePacket<IRequestPacket> DeserialiseResponsePacket(in Packet)
        /// <summary>
        /// Signifies that a connection with a remote endpoint has been lost.
        /// </summary>
        public event Action<EndPoint>? ClientDisconnected;

        /// <summary>
        /// Signifies that the server was started and clients will start being accepted.
        /// </summary>
        public event Action? ServerStarted;

        /// <summary>
        /// Signifies that the server was stopped and clients will stop being accepted.
        /// </summary>
        public event Action? ServerStopped;

        /// <summary>
        /// Starts the server asynchronously and starts accepting client connections. Does not block.
        /// </summary>
        /// <param name="localEndPoint">The local endpoint to bind to.</param>
        public Task RunAsync(EndPoint localEndPoint);

        /// <summary>
        /// Shuts down the server.
        /// </summary>
        public void Shutdown();

        /// <summary>
        /// Attempts to deregister the complex packet handler delegate for all packets of the given type. If a handler
        /// method doesn't exist for the given packet type, <paramref name="oldHandlerDelegate"/> will be <c>default</c>.
        /// </summary>
        /// <typeparam name="Req">The type of request packet for which to deregister the handler delegate.</typeparam>
        /// <typeparam name="Rep">The type of response packet that is generated by the delegate method.</typeparam>
        /// <param name="oldHandlerDelegate">The old handler delegate method that was previously registered.</param>
        /// <returns>Whether the packet handler delegate was successfully deregistered.</returns>
        public bool TryDeregisterComplexPacketHandler<Req, Rep>(out ComplexPacketHandler<Req, Rep>? oldHandlerDelegate)
            where Req : class, IRequestPacket, new() where Rep : class, IResponsePacket<Req>, new();

        /// <summary>
        /// Attempts to deregister the simple packet handler delegate for all packets of the given type. If a handler
        /// method doesn't exist for the given packet type, <paramref name="oldHandlerDelegate"/> will be <c>default</c>.
        /// </summary>
        /// <typeparam name="Req">The type of request packet for which to deregister the handler delegate.</typeparam>
        /// <param name="oldHandlerDelegate">The old handler delegate method that was previously registered.</param>
        /// <returns>Whether the packet handler delegate was successfully deregistered.</returns>
        public bool TryDeregisterSimplePacketHandler<Req>(out SimplePacketHandler<Req>? oldHandlerDelegate)
            where Req : class, IRequestPacket, new();

        /// <summary>
        /// Attempts to register a complex packet handler delegate for all packets of the given type. If a handler
        /// method already exists for the given packet type, it will be updated and replaced with the given one.
        /// </summary>
        /// <typeparam name="Req">The type of request packet for which to register the handler delegate.</typeparam>
        /// <typeparam name="Rep">The type of response packet that is generated by the delegate method.</typeparam>
        /// <param name="handlerDelegate">The delegate method to register as the complex packet handler.</param>
        /// <returns>Whether the packet handler delegate was successfully registered.</returns>
        public bool TryRegisterComplexPacketHandler<Req, Rep>(ComplexPacketHandler<Req, Rep> handlerDelegate)
            where Req : class, IRequestPacket, new() where Rep : class, IResponsePacket<Req>, new();

        /// <summary>
        /// Attempts to register a simple packet handler delegate for all packets of the given type. If a handler
        /// method already exists for the given packet type, it will be updated and replaced with the given one.
        /// </summary>
        /// <typeparam name="Req">The type of request packet for which to register the handler delegate.</typeparam>
        /// <param name="handlerDelegate">The delegate method to register as the simple packet handler.</param>
        /// <returns>Whether the packet handler delegate was successfully registered.</returns>
        public bool TryRegisterSimplePacketHandler<Req>(SimplePacketHandler<Req> handlerDelegate)
            where Req : class, IRequestPacket, new();
    }
}