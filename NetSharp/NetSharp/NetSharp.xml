<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSharp</name>
    </assembly>
    <members>
        <member name="T:NetSharp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.RawDatagramNetworkReaderRentedBufferSizeError">
            <summary>
              Looks up a localized string similar to Cannot rent a temporary buffer of size: {0} bytes. The maximum temporary buffer size is {1} bytes.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.RawDatagramSizeError">
            <summary>
              Looks up a localized string similar to The datagram size must be between 0 and 65507 bytes.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.RawStreamMessageSizeUnderflow">
            <summary>
              Looks up a localized string similar to The maximum pooled message size must be greater than 0 bytes.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.Datagram.RawDatagramConnection.MaxDatagramDataLength">
            <summary>
            The maximum size that a user supplied data buffer can be to fit into a UDP diagram with a preceding packet header.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramConnection.SendAsync(System.UInt16,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramConnection.CreateSocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramConnection.DestroySocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramConnection.ResetSocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramConnection.HandlerTaskWork">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.RawConnectionBase">
            <summary>
            Provides base functionality to all raw network connections.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.EndPoint)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Raw.RawConnectionBase" /> class.
            </summary>
            <param name="connectionSocketType">
            The socket type for the underlying network connection.
            </param>
            <param name="connectionProtocolType">
            The protocol type for the underlying network connection.
            </param>
            <param name="defaultRemoteEndPoint">
            The default remote endpoint to which network writes will be made.
            </param>
        </member>
        <member name="P:NetSharp.Raw.RawConnectionBase.DefaultRemoteEndPoint">
            <summary>
            The default remote endpoint to which network writes are made.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.RawConnectionBase.LocalEndPoint">
            <summary>
            The currently bound local endpoint.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.RawConnectionBase.RemoteEndPoint">
            <summary>
            The currently connected remote endpoint.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.RawConnectionBase.Connection">
            <summary>
            The underlying network connection.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.RawConnectionBase.IsDisposed">
            <summary>
            Whether the underlying network connection has been disposed or not.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.Bind(System.Net.EndPoint)">
            <summary>
            Binds the underlying network connection to the given local endpoint.
            </summary>
            <param name="localEndPoint">
            The local network endpoint to which we should bind.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.Close">
            <summary>
            Stops listening for incoming connections and data, and releases all managed resources.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.Start(System.Int32)">
            <summary>
            Starts listening to the network for incoming connections and data.
            </summary>
            <param name="concurrentTasks">
            The number of concurrent read tasks that should be maintained.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.CreateSocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <summary>
            Allows for custom initialisation of a pooled <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance.
            </summary>
            <param name="instance">
            The instance to initialise.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.DestroySocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <summary>
            Allows for custom destruction of a pooled <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance.
            </summary>
            <param name="instance">
            The instance to destroy.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:NetSharp.Raw.RawConnectionBase" /> instance.
            </summary>
            <param name="disposing">
            Whether the <see cref="M:NetSharp.Raw.RawConnectionBase.Dispose" /> method was called.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.HandlerTaskWork">
            <summary>
            Handler work delegate, started when a call to <see cref="M:NetSharp.Raw.RawConnectionBase.Start(System.Int32)" /> is made.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.RentBuffer(System.Int32)">
            <summary>
            Rents a pooled buffer of at least the specified length. The buffer MUST be returned via a call to <see
            cref="M:NetSharp.Raw.RawConnectionBase.ReturnBuffer(System.Byte[],System.Boolean)" /> once it has been used.
            </summary>
            <param name="minimumBufferLength">
            The minimum length of the rented buffer.
            </param>
            <returns>
            The rented buffer.
            </returns>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.RentSocketArgs">
            <summary>
            Rents a pooled <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance. The socket args MUST be returned via a call to
            <see cref="M:NetSharp.Raw.RawConnectionBase.ReturnSocketArgs(System.Net.Sockets.SocketAsyncEventArgs)" /> once they have been used.
            </summary>
            <returns>
            The rented socket args.
            </returns>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.ResetSocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <summary>
            Allows for custom resetting of a pooled <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance.
            </summary>
            <param name="instance">
            The instance to reset.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.ReturnBuffer(System.Byte[],System.Boolean)">
            <summary>
            Returns a previously rented pooled buffer, optionally without clearing it.
            </summary>
            <param name="buffer">
            The rented buffer.
            </param>
            <param name="clearBuffer">
            Whether to clear the data held in the buffer.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.ReturnSocketArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Returns a previously rented <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance.
            </summary>
            <param name="socketArgs">
            The rented socket args.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawConnectionBase.StartHook(System.Int32)">
            <summary>
            Allows for custom setup before we start listening to the network.
            </summary>
            <param name="concurrentTasks">
            The number of concurrent read tasks that should be maintained.
            </param>
        </member>
        <member name="T:NetSharp.Raw.RawPacketHeader">
            <summary>
            Contains metadata about a network packet.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.RawPacketHeader.Length">
            <summary>
            The total length of the packet when serialised.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.RawPacketHeader.DataLength">
            <summary>
            The length of the data following this packet.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.RawPacketHeader.Type">
            <summary>
            The packet type.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawPacketHeader.op_Inequality(NetSharp.Raw.RawPacketHeader,NetSharp.Raw.RawPacketHeader)">
            <summary>
            Checks whether two <see cref="T:NetSharp.Raw.RawPacketHeader" /> instances are not equal.
            </summary>
            <param name="left">
            The first instance.
            </param>
            <param name="right">
            The second instance.
            </param>
            <returns>
            Whether the two instances are not equal.
            </returns>
        </member>
        <member name="M:NetSharp.Raw.RawPacketHeader.op_Equality(NetSharp.Raw.RawPacketHeader,NetSharp.Raw.RawPacketHeader)">
            <summary>
            Checks whether two <see cref="T:NetSharp.Raw.RawPacketHeader" /> instances are equal.
            </summary>
            <param name="left">
            The first instance.
            </param>
            <param name="right">
            The second instance.
            </param>
            <returns>
            Whether the two instances are equal.
            </returns>
        </member>
        <member name="M:NetSharp.Raw.RawPacketHeader.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawPacketHeader.Equals(NetSharp.Raw.RawPacketHeader)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawPacketHeader.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.Stream.IRawStreamPacketHandler">
            <summary>
            Describes the interface for a stream network connection that can handle received packets.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.IRawStreamPacketHandler.DeregisterHandler(System.Int32,NetSharp.Raw.Stream.RawStreamPacketHandler)">
            <summary>
            Deregisters a previously registered handler for the given packet type. No further invocations of the given
            handler will be made.
            </summary>
            <param name="id">
            The packet type for which to deregister the handler.
            </param>
            <param name="handler">
            The handler to deregister.
            </param>
        </member>
        <member name="M:NetSharp.Raw.Stream.IRawStreamPacketHandler.RegisterHandler(System.Int32,NetSharp.Raw.Stream.RawStreamPacketHandler)">
            <summary>
            Registers the given handler for the given packet type.
            </summary>
            <param name="id">
            The packet type for which to register the handler.
            </param>
            <param name="handler">
            The handler to register.
            </param>
        </member>
        <member name="T:NetSharp.Raw.Stream.IRawStreamWriter">
            <summary>
            Describes the interface for a stream network connection that can write to the network.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.IRawStreamWriter.SendAsync(System.UInt16,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <summary>
            Writes the given packet header and data to the network asynchronously, using the given socket flags for the transmission.
            </summary>
            <param name="type">
            The type of packet being written to the network.
            </param>
            <param name="buffer">
            The data held by the packet being written to the network.
            </param>
            <param name="flags">
            The <see cref="T:System.Net.Sockets.SocketFlags" /> to use for the transmission.
            </param>
            <returns>
            The number of bytes written to the network.
            </returns>
        </member>
        <member name="T:NetSharp.Raw.Stream.RawStreamPacketHandler">
            <summary>
            Handles a message received on a raw stream connection.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint from which the received message originated.
            </param>
            <param name="header">
            The header of the received message.
            </param>
            <param name="data">
            The data held by the received message.
            </param>
            <param name="writer">
            A reference to the network connection, to interact with the network further.
            </param>
        </member>
        <member name="T:NetSharp.Raw.Stream.RawStreamConnection">
            <summary>
            Represents a network connection using a stream-based protocol to interact over the network, that is capable of
            sending raw bytes.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.#ctor(System.Net.Sockets.ProtocolType,System.Net.EndPoint)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Raw.Stream.RawStreamConnection" /> class.
            </summary>
            <param name="connectionProtocolType">
            The protocol that the underlying network connection should use.
            </param>
            <param name="defaultRemoteEndPoint">
            The default remote endpoint that should be used for pending connections.
            </param>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.ConnectAsync(System.Net.EndPoint)">
            <summary>
            Connects asynchronously to the given remote network endpoint.
            </summary>
            <param name="remoteEndPoint">
            The endpoint of the remote network connection to which we want to connect.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.DeregisterHandler(System.Int32,NetSharp.Raw.Stream.RawStreamPacketHandler)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.DisconnectAsync(System.Boolean)">
            <summary>
            Disconnects asynchronously from the currently connected remote network connection.
            </summary>
            <param name="leaveConnectionReusable">
            Whether the underlying network connection should be left in a reusable state after this call completes.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.RegisterHandler(System.Int32,NetSharp.Raw.Stream.RawStreamPacketHandler)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.SendAsync(System.UInt16,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.CreateSocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.DestroySocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandlerTaskWork">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.ResetSocketArgsHook(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.StartHook(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.ConfigureSendRequestAsync(System.Net.Sockets.SocketAsyncEventArgs,System.Byte[]@,NetSharp.Raw.RawPacketHeader@,System.ReadOnlyMemory{System.Byte}@,NetSharp.Raw.Stream.RawStreamConnection.WriterStateToken,System.Threading.Tasks.TaskCompletionSource{System.Int32})">
            <summary>
            Prepares the given socket args for sending a request to the network.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.CleanupArgs(System.Net.Sockets.SocketAsyncEventArgs,System.Boolean)">
            <summary>
            Cleans up and returns the given socket args.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.ConfigureReceiveDataAsync(System.Net.Sockets.SocketAsyncEventArgs,NetSharp.Raw.Stream.RawStreamConnection.ReaderStateToken,NetSharp.Raw.RawPacketHeader@)">
            <summary>
            Prepares the given socket args for receiving a packet's data from the network.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.ConfigureReceiveHeaderAsync(System.Net.Sockets.SocketAsyncEventArgs,NetSharp.Raw.Stream.RawStreamConnection.ReaderStateToken)">
            <summary>
            Prepares the given socket args for receiving a packet's header from the network.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleAccepted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles a completed <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleConnected(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles a completed <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleDisconnected(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles a completed <see cref="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles the completion of an asynchronous socket operation.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleReceived(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles the completion of a <see cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleReceivedData(System.Net.Sockets.SocketAsyncEventArgs,NetSharp.Raw.Stream.RawStreamConnection.ReaderStateToken)">
            <summary>
            Handles the completion of a <see cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call, when receiving a packet's data from the network.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleReceivedHeader(System.Net.Sockets.SocketAsyncEventArgs,NetSharp.Raw.Stream.RawStreamConnection.ReaderStateToken)">
            <summary>
            Handles the completion of a <see cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call, when receiving a packet's header from
            the network.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleSent(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles the completion of a <see cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleSentRequest(System.Net.Sockets.SocketAsyncEventArgs,NetSharp.Raw.Stream.RawStreamConnection.WriterStateToken)">
            <summary>
            Handles the completion of a <see cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call, when sending a request packet to the
            network. In this case, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket" /> will be used to perform the transmission.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.HandleSentResponse(System.Net.Sockets.SocketAsyncEventArgs,NetSharp.Raw.Stream.RawStreamConnection.ReaderStateToken)">
            <summary>
            Handles the completion of a <see cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> call, when sending a response packet to the
            network. In this case, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket" /> will be used to perform the transmission.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.StartOrContinueReceiving(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Starts or continues an asynchronous network read operation.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.StartOrContinueSending(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Starts or continues an asynchronous network write operation using the given socket.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.Stream.RawStreamConnection.OperationStateToken.OperationCompletionSource">
            <summary>
            The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> for asynchronous network operations.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.OperationStateToken.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.ReaderStateToken.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.RemoteConnectionWrapper.SendAsync(System.UInt16,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamConnection.WriterStateToken.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1">
            <summary>
            Provides a lightweight implementation of an object pool for classes.
            </summary>
            <typeparam name="T">
            The type of item stored in the pool.
            </typeparam>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObject,NetSharp.Utils.SlimObjectPool{`0}.ResetObject,NetSharp.Utils.SlimObjectPool{`0}.DestroyObject)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1" /> class.
            </summary>
            <param name="create">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="reset">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroy">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CreateObject">
            <summary>
            Delegate method for creating fresh <typeparamref name="T" /> instances to be stored in the pool.
            </summary>
            <returns>
            A configured <typeparamref name="T" /> instance.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.DestroyObject">
            <summary>
            Delegate method to destroy a used <paramref name="instance" /> which cannot be reused.
            </summary>
            <param name="instance">
            The instance to destroy.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.ResetObject">
            <summary>
            Delegate method to reset a used <paramref name="instance" /> before placing it back into the pool.
            </summary>
            <param name="instance">
            The instance which should be reset.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Rent">
            <summary>
            Leases a new <typeparamref name="T" /> instance from the pool, and returns it.
            </summary>
            <returns>
            The <typeparamref name="T" /> instance which was fetched from the pool.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Return(`0)">
            <summary>
            Returns a previously leased <typeparamref name="T" /> instance to the pool.
            </summary>
            <param name="instance">
            The previously leased instance which should be returned.
            </param>
        </member>
    </members>
</doc>
