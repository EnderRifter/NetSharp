<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSharp</name>
    </assembly>
    <members>
        <member name="M:NetSharp.Connection.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,NetSharp.Raw.IRawNetworkTransportProvider{System.Net.Sockets.SocketAsyncEventArgs},System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Connection.HandleRawPacketReceived(System.Net.EndPoint@,System.ReadOnlyMemory{System.Byte},System.Int32,System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.ConnectionBase.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.NetworkPacket">
            <summary>
            Represents a raw packet sent across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.DataSize">
            <summary>
            The size in bytes of the packet data segment.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.FooterSize">
            <summary>
            The size in bytes of the packet footer segment.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.HeaderSize">
            <summary>
            The size in bytes of the packet header segment.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.TotalSize">
            <summary>
            The total size of the packet in bytes.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.NullPacket">
            <summary>
            Represents an empty packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.Data">
            <summary>
            The data held by this packet instance.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.Footer">
            <summary>
            The footer for this packet instance, holding additional metadata.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.Header">
            <summary>
            The header for this packet instance, holding additional metadata.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.#ctor(NetSharp.Packets.NetworkPacketHeader,System.ReadOnlyMemory{System.Byte},NetSharp.Packets.NetworkPacketFooter)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Packets.NetworkPacket" /> struct.
            </summary>
            <param name="packetHeader">
            The header for this packet.
            </param>
            <param name="packetDataBuffer">
            The data that should be stored in the packet.
            </param>
            <param name="packetFooter">
            The footer for this packet.
            </param>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.Deserialise(System.ReadOnlyMemory{System.Byte},NetSharp.Packets.NetworkPacket@)">
            <summary>
            Deserialises the serialised packet in the given memory buffer into a new <see cref="T:NetSharp.Packets.NetworkPacket" /> instance.
            </summary>
            <param name="buffer">
            The memory buffer to read the serialised packet instance from.
            </param>
            <param name="instance">
            The deserialised instance.
            </param>
            <returns>
            Whether the deserialisation attempt was successful. The <paramref name="instance" /> will be equal to <see cref="F:NetSharp.Packets.NetworkPacket.NullPacket" /> if the
            attempt fails.
            </returns>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.Serialise(NetSharp.Packets.NetworkPacket,System.Memory{System.Byte})">
            <summary>
            Serialises the given <see cref="T:NetSharp.Packets.NetworkPacket" /> instance into the given memory buffer.
            </summary>
            <param name="instance">
            The packet instance which should be serialised.
            </param>
            <param name="buffer">
            The memory buffer to write the serialised packet instance to. <see cref="F:NetSharp.Packets.NetworkPacket.TotalSize" /> bytes will be written into this buffer on success.
            </param>
            <returns>
            Whether the serialisation attempt was successful. No bytes are written to the <paramref name="buffer" /> if the attempt fails.
            </returns>
        </member>
        <member name="T:NetSharp.Packets.NetworkPacketFooter">
            <summary>
            Represents the footer of a <see cref="T:NetSharp.Packets.NetworkPacket" />, holding additional metadata.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketFooter.TotalSize">
            <summary>
            The total size of the packet footer, in bytes.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketFooter.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialises the serialised packet footer in the given memory buffer into a new <see cref="T:NetSharp.Packets.NetworkPacketFooter" /> instance.
            </summary>
            <param name="buffer">
            The memory buffer to read the serialised packet footer instance from.
            </param>
            <returns>
            The deserialised instance.
            </returns>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketFooter.Serialise(NetSharp.Packets.NetworkPacketFooter,System.Memory{System.Byte})">
            <summary>
            Serialises the given <see cref="T:NetSharp.Packets.NetworkPacketFooter" /> instance into the given memory buffer.
            </summary>
            <param name="instance">
            The packet footer instance which should be serialised.
            </param>
            <param name="buffer">
            The memory buffer to write the serialised packet footer instance to.
            </param>
        </member>
        <member name="T:NetSharp.Packets.NetworkPacketHeader">
            <summary>
            Represents the header of a <see cref="T:NetSharp.Packets.NetworkPacket" />, holding additional metadata.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketHeader.TotalSize">
            <summary>
            The total size of the packet header, in bytes.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketHeader.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialises the serialised packet header in the given memory buffer into a new <see cref="T:NetSharp.Packets.NetworkPacketHeader" /> instance.
            </summary>
            <param name="buffer">
            The memory buffer to read the serialised packet header instance from.
            </param>
            <returns>
            The deserialised instance.
            </returns>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketHeader.Serialise(NetSharp.Packets.NetworkPacketHeader,System.Memory{System.Byte})">
            <summary>
            Serialises the given <see cref="T:NetSharp.Packets.NetworkPacketHeader" /> instance into the given memory buffer.
            </summary>
            <param name="instance">
            The packet header instance which should be serialised.
            </param>
            <param name="buffer">
            The memory buffer to write the serialised packet header instance to.
            </param>
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.#ctor(System.Net.Sockets.Socket@,NetSharp.Raw.NetworkRequestHandler,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.Connect(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.ConnectAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Raw.DatagramRawNetworkTransportProvider.TransportProtocolType">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.DatagramRawNetworkTransportProvider.GetReader(System.Net.Sockets.Socket@,System.Net.EndPoint,NetSharp.Raw.NetworkRequestHandler,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.DatagramRawNetworkTransportProvider.GetWriter(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Raw.StreamRawNetworkTransportProvider.TransportProtocolType">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.StreamRawNetworkTransportProvider.GetReader(System.Net.Sockets.Socket@,System.Net.EndPoint,NetSharp.Raw.NetworkRequestHandler,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.StreamRawNetworkTransportProvider.GetWriter(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase`1.Dispose(System.Boolean)">
            <summary>
            Allows for inheritors to dispose of their own resources.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase`1.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,NetSharp.Raw.NetworkRequestHandler,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase`1.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.#ctor(System.Net.Sockets.Socket@,NetSharp.Raw.NetworkRequestHandler,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.Connect(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.ConnectAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Utils.BiDictionary`2">
            <summary>
            Represents a concurrent two-way dictionary, that can be indexed by either a key or a value.
            </summary>
            <typeparam name="K">
            The type of key that will be stored.
            </typeparam>
            <typeparam name="V">
            The type of value that will be stored.
            </typeparam>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.keyToValueMap">
            <summary>
            Maps keys to their corresponding values.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap">
            <summary>
            Maps values to their corresponding keys.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.BiDictionary`2" /> class.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`1)">
            <summary>
            Indexes this instance with the given value.
            </summary>
            <param name="index">
            The value whose key to get or set.
            </param>
            <returns>
            The fetched key.
            </returns>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`0)">
            <summary>
            Indexes this instance with the given key.
            </summary>
            <param name="index">
            The key whose value to get or set.
            </param>
            <returns>
            The fetched value.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.Clear">
            <summary>
            Clears this instance's <see cref="F:NetSharp.Utils.BiDictionary`2.keyToValueMap" /> and <see cref="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap" />.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsKey(`0@)">
            <summary>
            Whether this instance contains the given key.
            </summary>
            <param name="key">
            The key to check.
            </param>
            <returns>
            Whether the given key was found.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsValue(`1@)">
            <summary>
            Whether this instance contains the given value.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            Whether the given value was found.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateKey(`1,`0)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to set.
            </param>
            <param name="key">
            The new value for the value's associated key.
            </param>
            <returns>
            Whether the new key was correctly set.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateValue(`0,`1)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to set.
            </param>
            <param name="value">
            The new value for the key's associated value.
            </param>
            <returns>
            Whether the new value was correctly set.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearKey(`1@,`0@)">
            <summary>
            Attempts to remove the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to remove.
            </param>
            <param name="key">
            The old key value.
            </param>
            <returns>
            Whether the given value had a valid key associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearValue(`0@,`1@)">
            <summary>
            Attempts to remove the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to remove.
            </param>
            <param name="value">
            The old value.
            </param>
            <returns>
            Whether the given key had a valid valid associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetKey(`1@,`0@)">
            <summary>
            Attempts to get the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to get.
            </param>
            <param name="key">
            The returned key.
            </param>
            <returns>
            Whether the given value has a valid key associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            Attempts to get the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to get.
            </param>
            <param name="value">
            The returned value.
            </param>
            <returns>
            Whether the given key as a valid value associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetKey(`1@,`0@)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to set.
            </param>
            <param name="key">
            The key which should be set for the given value.
            </param>
            <returns>
            Whether the given value was successfully set.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetValue(`0@,`1@)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to set.
            </param>
            <param name="value">
            The value which should be set for the given key.
            </param>
            <returns>
            Whether the given key was successfully set.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.Conversion.EndianAwareBitConverter">
            <summary>
            Wraps the <see cref="T:System.BitConverter" /> class to provide conversion that is endian-aware.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ReverseAsNeeded(System.Span{System.Byte},System.Boolean)">
            <summary>
            Reverses the given bytes if the endian-nes doesn't match.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Boolean)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Char,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Char)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Double,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Double)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Single,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Single)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToBoolean(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToChar(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToDouble(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt16(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToSingle(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt16(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1">
            <summary>
            Provides a lightweight implementation of an object pool for classes.
            </summary>
            <typeparam name="T">
            The type of item stored in the pool.
            </typeparam>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.ResetObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.DestroyObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.CanRebufferObjectPredicate@,System.Collections.Concurrent.IProducerConsumerCollection{`0}@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1" /> class.
            </summary>
            <param name="createDelegate">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="resetDelegate">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroyDelegate">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
            <param name="rebufferPredicate">
            The delegate method to use to decide whether an instance can be reused.
            </param>
            <param name="baseCollection">
            The underlying pooled object buffer to use.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.ResetObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.DestroyObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.CanRebufferObjectPredicate@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1" /> class.
            </summary>
            <param name="createDelegate">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="resetDelegate">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroyDelegate">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
            <param name="rebufferPredicate">
            The delegate method to use to decide whether an instance can be reused.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CanRebufferObjectPredicate">
            <summary>
            Delegate method to check whether the given <paramref name="instance" /> can and should be placed back into the pool. If <c>true</c> is
            returned, the <paramref name="instance" /> is reset and placed back into the pool. Otherwise, the instance is destroyed.
            </summary>
            <param name="instance">
            The instance to check.
            </param>
            <returns>
            Whether the given instance should be placed back into the pool.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CreateObjectDelegate">
            <summary>
            Delegate method for creating fresh <typeparamref name="T" /> instances to be stored in the pool.
            </summary>
            <returns>
            A configured <typeparamref name="T" /> instance.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.DestroyObjectDelegate">
            <summary>
            Delegate method to destroy a used <paramref name="instance" /> which cannot be reused.
            </summary>
            <param name="instance">
            The instance to destroy.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.ResetObjectDelegate">
            <summary>
            Delegate method to reset a used <paramref name="instance" /> before placing it back into the pool.
            </summary>
            <param name="instance">
            The instance which should be reset.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Rent">
            <summary>
            Leases a new <typeparamref name="T" /> instance from the pool, and returns it.
            </summary>
            <returns>
            The <typeparamref name="T" /> instance which was fetched from the pool.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Return(`0)">
            <summary>
            Returns a previously leased <typeparamref name="T" /> instance to the pool.
            </summary>
            <param name="instance">
            The previously leased instance which should be returned.
            </param>
        </member>
        <member name="T:NetSharp.Utils.TransmissionResult">
            <summary>
            Represents the result of a socket transmission.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Timeout">
            <summary>
            Represents an asynchronous transmission which timed out.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Buffer">
            <summary>
            The byte buffer that was transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Count">
            <summary>
            The number of bytes that were transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.RemoteEndPoint">
            <summary>
            The remote endpoint to which the buffer was transmitted.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.#ctor(System.Net.Sockets.SocketAsyncEventArgs@)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.TransmissionResult" /> struct.
            </summary>
            <param name="args">
            The socket arguments associated with the transmission.
            </param>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.#ctor(System.Byte[]@,System.Int32@,System.Net.EndPoint@)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.TransmissionResult" /> struct.
            </summary>
            <param name="buffer">
            The buffer associated with the transmission.
            </param>
            <param name="count">
            The number of bytes written to or read from the buffer.
            </param>
            <param name="remoteEndPoint">
            The remote end point associated with the transmission.
            </param>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.TimedOut">
            <summary>
            Checks whether this instance represents a timed out transmission.
            </summary>
            <returns>
            Whether this instance has timed out.
            </returns>
        </member>
    </members>
</doc>
