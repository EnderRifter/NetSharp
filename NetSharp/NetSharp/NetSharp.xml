<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSharp</name>
    </assembly>
    <members>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.#ctor(System.Net.Sockets.Socket@,NetSharp.Raw.Datagram.RawDatagramRequestHandler,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.Dispose(System.Boolean)">
            <summary>
            Allows for inheritors to dispose of their own resources.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.Stop">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.#ctor(System.Net.Sockets.Socket@,NetSharp.Raw.Stream.RawStreamRequestHandler,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Utils.Conversion.EndianAwareBitConverter">
            <summary>
            Wraps the <see cref="T:System.BitConverter" /> class to provide conversion that is endian-aware.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ReverseAsNeeded(System.Span{System.Byte},System.Boolean)">
            <summary>
            Reverses the given bytes if the endian-nes doesn't match.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Boolean)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Char,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Char)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Double,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Double)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Single,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Single)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToBoolean(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToChar(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToDouble(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt16(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToSingle(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt16(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1">
            <summary>
            Provides a lightweight implementation of an object pool for classes.
            </summary>
            <typeparam name="T">
            The type of item stored in the pool.
            </typeparam>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.ResetObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.DestroyObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.CanRebufferObjectPredicate@,System.Collections.Concurrent.IProducerConsumerCollection{`0}@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1" /> class.
            </summary>
            <param name="createDelegate">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="resetDelegate">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroyDelegate">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
            <param name="rebufferPredicate">
            The delegate method to use to decide whether an instance can be reused.
            </param>
            <param name="baseCollection">
            The underlying pooled object buffer to use.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.ResetObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.DestroyObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.CanRebufferObjectPredicate@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1" /> class.
            </summary>
            <param name="createDelegate">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="resetDelegate">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroyDelegate">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
            <param name="rebufferPredicate">
            The delegate method to use to decide whether an instance can be reused.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CanRebufferObjectPredicate">
            <summary>
            Delegate method to check whether the given <paramref name="instance" /> can and should be placed back into the pool. If <c>true</c> is
            returned, the <paramref name="instance" /> is reset and placed back into the pool. Otherwise, the instance is destroyed.
            </summary>
            <param name="instance">
            The instance to check.
            </param>
            <returns>
            Whether the given instance should be placed back into the pool.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CreateObjectDelegate">
            <summary>
            Delegate method for creating fresh <typeparamref name="T" /> instances to be stored in the pool.
            </summary>
            <returns>
            A configured <typeparamref name="T" /> instance.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.DestroyObjectDelegate">
            <summary>
            Delegate method to destroy a used <paramref name="instance" /> which cannot be reused.
            </summary>
            <param name="instance">
            The instance to destroy.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.ResetObjectDelegate">
            <summary>
            Delegate method to reset a used <paramref name="instance" /> before placing it back into the pool.
            </summary>
            <param name="instance">
            The instance which should be reset.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Rent">
            <summary>
            Leases a new <typeparamref name="T" /> instance from the pool, and returns it.
            </summary>
            <returns>
            The <typeparamref name="T" /> instance which was fetched from the pool.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Return(`0)">
            <summary>
            Returns a previously leased <typeparamref name="T" /> instance to the pool.
            </summary>
            <param name="instance">
            The previously leased instance which should be returned.
            </param>
        </member>
    </members>
</doc>
