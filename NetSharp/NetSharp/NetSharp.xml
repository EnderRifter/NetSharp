<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSharp</name>
    </assembly>
    <members>
        <member name="T:NetSharp.Packets.NetworkPacket">
            <summary>
            Represents a raw packet sent across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.DataSize">
            <summary>
            The size in bytes of the packet data segment.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.FooterSize">
            <summary>
            The size in bytes of the packet footer segment.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.HeaderSize">
            <summary>
            The size in bytes of the packet header segment.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.TotalSize">
            <summary>
            The total size of the packet in bytes.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.NullPacket">
            <summary>
            Represents an empty packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.Data">
            <summary>
            The data held by this packet instance.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.Footer">
            <summary>
            The footer for this packet instance, holding additional metadata.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.Header">
            <summary>
            The header for this packet instance, holding additional metadata.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.#ctor(NetSharp.Packets.NetworkPacketHeader,System.ReadOnlyMemory{System.Byte},NetSharp.Packets.NetworkPacketFooter)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Packets.NetworkPacket" /> struct.
            </summary>
            <param name="packetHeader">
            The header for this packet.
            </param>
            <param name="packetDataBuffer">
            The data that should be stored in the packet.
            </param>
            <param name="packetFooter">
            The footer for this packet.
            </param>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.Deserialise(System.ReadOnlyMemory{System.Byte},NetSharp.Packets.NetworkPacket@)">
            <summary>
            Deserialises the serialised packet in the given memory buffer into a new <see cref="T:NetSharp.Packets.NetworkPacket" /> instance.
            </summary>
            <param name="buffer">
            The memory buffer to read the serialised packet instance from.
            </param>
            <param name="instance">
            The deserialised instance.
            </param>
            <returns>
            Whether the deserialisation attempt was successful. The <paramref name="instance" /> will be equal to <see cref="F:NetSharp.Packets.NetworkPacket.NullPacket" /> if the
            attempt fails.
            </returns>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.Serialise(NetSharp.Packets.NetworkPacket,System.Memory{System.Byte})">
            <summary>
            Serialises the given <see cref="T:NetSharp.Packets.NetworkPacket" /> instance into the given memory buffer.
            </summary>
            <param name="instance">
            The packet instance which should be serialised.
            </param>
            <param name="buffer">
            The memory buffer to write the serialised packet instance to. <see cref="F:NetSharp.Packets.NetworkPacket.TotalSize" /> bytes will be written into this buffer on success.
            </param>
            <returns>
            Whether the serialisation attempt was successful. No bytes are written to the <paramref name="buffer" /> if the attempt fails.
            </returns>
        </member>
        <member name="T:NetSharp.Packets.NetworkPacketFooter">
            <summary>
            Represents the footer of a <see cref="T:NetSharp.Packets.NetworkPacket" />, holding additional metadata.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketFooter.TotalSize">
            <summary>
            The total size of the packet footer, in bytes.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketFooter.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialises the serialised packet footer in the given memory buffer into a new <see cref="T:NetSharp.Packets.NetworkPacketFooter" /> instance.
            </summary>
            <param name="buffer">
            The memory buffer to read the serialised packet footer instance from.
            </param>
            <returns>
            The deserialised instance.
            </returns>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketFooter.Serialise(NetSharp.Packets.NetworkPacketFooter,System.Memory{System.Byte})">
            <summary>
            Serialises the given <see cref="T:NetSharp.Packets.NetworkPacketFooter" /> instance into the given memory buffer.
            </summary>
            <param name="instance">
            The packet footer instance which should be serialised.
            </param>
            <param name="buffer">
            The memory buffer to write the serialised packet footer instance to.
            </param>
        </member>
        <member name="T:NetSharp.Packets.NetworkPacketHeader">
            <summary>
            Represents the header of a <see cref="T:NetSharp.Packets.NetworkPacket" />, holding additional metadata.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketHeader.TotalSize">
            <summary>
            The total size of the packet header, in bytes.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketHeader.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialises the serialised packet header in the given memory buffer into a new <see cref="T:NetSharp.Packets.NetworkPacketHeader" /> instance.
            </summary>
            <param name="buffer">
            The memory buffer to read the serialised packet header instance from.
            </param>
            <returns>
            The deserialised instance.
            </returns>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacketHeader.Serialise(NetSharp.Packets.NetworkPacketHeader,System.Memory{System.Byte})">
            <summary>
            Serialises the given <see cref="T:NetSharp.Packets.NetworkPacketHeader" /> instance into the given memory buffer.
            </summary>
            <param name="instance">
            The packet header instance which should be serialised.
            </param>
            <param name="buffer">
            The memory buffer to write the serialised packet header instance to.
            </param>
        </member>
        <member name="T:NetSharp.Sockets.Datagram.DatagramSocketClientOptions">
            <summary>
            Provides additional configuration options for a <see cref="T:NetSharp.Sockets.Datagram.DatagramSocketClient" /> instance.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Datagram.DatagramSocketClientOptions.Defaults">
            <summary>
            The default configuration.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Datagram.DatagramSocketClientOptions.PreallocatedTransmissionArgs">
            <summary>
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances that should be preallocated for use in the
            <see cref="!:DatagramSocketClient.SendToAsyncInternal" /> and <see cref="!:DatagramSocketClient.ReceiveFromAsyncInternal" /> methods.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClientOptions.#ctor(System.UInt16)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.Datagram.DatagramSocketClientOptions" /> struct.
            </summary>
            <param name="preallocatedTransmissionArgs">
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances to preallocate.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.CanTransmissionArgsBeReused(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.CreateTransmissionArgs">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.DestroyTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.ResetTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.Receive(System.Net.EndPoint@,System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.ReceiveAsync(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.Send(System.Net.EndPoint@,System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketClient.SendAsync(System.Net.EndPoint@,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Sockets.Datagram.DatagramSocketServerOptions">
            <summary>
            Provides additional configuration options for a <see cref="T:NetSharp.Sockets.Datagram.DatagramSocketServer" /> instance.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Datagram.DatagramSocketServerOptions.Defaults">
            <summary>
            The default configuration.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Datagram.DatagramSocketServerOptions.ConcurrentReceiveFromCalls">
            <summary>
            The number of <see cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> calls that will be 'in-flight' at any one time, and ready to service incoming client
            packets. This should be set to the number of client which will be connected at once.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Datagram.DatagramSocketServerOptions.PreallocatedTransmissionArgs">
            <summary>
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances that should be preallocated for use in the <see cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
            and <see cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> methods.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServerOptions.#ctor(System.Int32,System.UInt16)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.Datagram.DatagramSocketServerOptions" /> struct.
            </summary>
            <param name="concurrentReceiveFromCalls">
            The number of <see cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> calls which should be 'in-flight' at any one time.
            </param>
            <param name="preallocatedTransmissionArgs">
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances to preallocate.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServer.#ctor(System.Net.Sockets.AddressFamily@,System.Net.Sockets.ProtocolType@,NetSharp.Sockets.SocketServerPacketHandler@,System.Nullable{NetSharp.Sockets.Datagram.DatagramSocketServerOptions}@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.Datagram.DatagramSocketServer" /> class.
            </summary>
            <param name="serverOptions">
            Additional options to configure the server.
            </param>
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServer.CanTransmissionArgsBeReused(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServer.CreateTransmissionArgs">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServer.DestroyTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServer.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServer.ResetTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Datagram.DatagramSocketServer.RunAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Sockets.SocketClient">
            <summary>
            Abstract base class for clients.
            </summary>
            TODO implement proper memory leak-free cancellation of network IO operations
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.#ctor(System.Net.Sockets.AddressFamily@,System.Net.Sockets.SocketType@,System.Net.Sockets.ProtocolType@,System.Int32@,System.UInt16@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.SocketClient" /> class.
            </summary>
            <param name="connectionAddressFamily">
            The address family that the underlying connection should use.
            </param>
            <param name="connectionSocketType">
            The socket type that the underlying connection should use.
            </param>
            <param name="connectionProtocolType">
            The protocol type that the underlying connection should use.
            </param>
            <param name="pooledBufferMaxSize">
            The maximum size in bytes of buffers held in the buffer pool.
            </param>
            <param name="preallocatedTransmissionArgs">
            The number of transmission args to preallocate.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.CancelAsyncOperationCallback(System.Object)">
            <summary>
            Callback for the cancellation of an asynchronous network operation.
            </summary>
            <param name="state">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> state object for the operation.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.CancelAsyncReceiveCallback(System.Object)">
            <summary>
            Callback for the cancellation of an asynchronous network receive operation.
            </summary>
            <param name="state">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> state object for the operation.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.CancelAsyncSendCallback(System.Object)">
            <summary>
            Callback for the cancellation of an asynchronous network send operation.
            </summary>
            <param name="state">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> state object for the operation.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.Connect(System.Net.EndPoint@)">
            <summary>
            Connects the client to the specified end point. If called on a <see cref="F:System.Net.Sockets.SocketType.Dgram" />-based client, this method configures the
            default remote host, and the client will ignore any packets not coming from this default host (i.e the given <paramref name="remoteEndPoint" />).
            </summary>
            <param name="remoteEndPoint">
            The remote end point which to which to connect the client.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.ConnectAsync(System.Net.EndPoint@,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connects the client to the specified end point. If called on a <see cref="F:System.Net.Sockets.SocketType.Dgram" />-based client, this method
            configures the default remote host, and the client will ignore any packets not coming from this default host (i.e the given <paramref name="remoteEndPoint" />).
            </summary>
            <param name="remoteEndPoint">
            The remote end point which to which to connect the client.
            </param>
            <param name="cancellationToken">
            The cancellation token to observe during the asynchronous operation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the connection attempt.
            </returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.Receive(System.Net.EndPoint@,System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Listens for data from the specified endpoint, placing the data in the given buffer. On connection-oriented protocols, the given endpoint
            is ignored in favour of the default remote host set up by a call to <see cref="M:NetSharp.Sockets.SocketClient.Connect(System.Net.EndPoint@)" /> or <see cref="M:NetSharp.Sockets.SocketClient.ConnectAsync(System.Net.EndPoint@,System.Threading.CancellationToken)" />.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint from which data should be received. Ignored on connection-oriented protocols.
            </param>
            <param name="receiveBuffer">
            The buffer into which data is to be received.
            </param>
            <param name="flags">
            The socket flags associated with the send operation.
            </param>
            <returns>
            The result of the receive operation.
            </returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.ReceiveAsync(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously listens for data from the specified endpoint, placing the data in the given buffer. On connection-oriented protocols, the
            given endpoint is ignored in favour of the default remote host set up by a call to <see cref="M:NetSharp.Sockets.SocketClient.Connect(System.Net.EndPoint@)" /> or <see cref="M:NetSharp.Sockets.SocketClient.ConnectAsync(System.Net.EndPoint@,System.Threading.CancellationToken)" />.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint from which data should be received. Ignored on connection-oriented protocols.
            </param>
            <param name="receiveBuffer">
            The buffer into which data is to be received.
            </param>
            <param name="flags">
            The socket flags associated with the send operation.
            </param>
            <param name="cancellationToken">
            The cancellation token to observe during the asynchronous operation.
            </param>
            <returns>
            The result of the asynchronous receive operation.
            </returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.Send(System.Net.EndPoint@,System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the data in the given buffer to the specified endpoint. On connection-oriented protocols, the given endpoint is ignored in favour of
            the default remote host set up by a call to <see cref="M:NetSharp.Sockets.SocketClient.Connect(System.Net.EndPoint@)" /> or <see cref="M:NetSharp.Sockets.SocketClient.ConnectAsync(System.Net.EndPoint@,System.Threading.CancellationToken)" />.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint to which data should be sent. Ignored on connection-oriented protocols.
            </param>
            <param name="sendBuffer">
            The buffer containing the outgoing data to be sent.
            </param>
            <param name="flags">
            The socket flags associated with the send operation.
            </param>
            <returns>
            The result of the send operation.
            </returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.SendAsync(System.Net.EndPoint@,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the data in the given buffer to the specified endpoint. On connection-oriented protocols, the given endpoint is
            ignored in favour of the default remote host set up by a call to <see cref="M:NetSharp.Sockets.SocketClient.Connect(System.Net.EndPoint@)" /> or <see cref="M:NetSharp.Sockets.SocketClient.ConnectAsync(System.Net.EndPoint@,System.Threading.CancellationToken)" />.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint to which data should be sent. Ignored on connection-oriented protocols.
            </param>
            <param name="sendBuffer">
            The buffer containing the outgoing data to be sent. The contents of the buffer are copied to an internally maintained buffer when the call
            is made.
            </param>
            <param name="flags">
            The socket flags associated with the send operation.
            </param>
            <param name="cancellationToken">
            The cancellation token to observe during the asynchronous operation.
            </param>
            <returns>
            The result of the asynchronous send operation.
            </returns>
        </member>
        <member name="T:NetSharp.Sockets.SocketClient.AsyncOperationToken">
            <summary>
            A state token for asynchronous socket operations.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketClient.AsyncOperationToken.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken" /> associated with the socket operation.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketClient.AsyncOperationToken.CompletionSource">
            <summary>
            The completion source which wraps the event-based APM, and provides an awaitable <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.AsyncOperationToken.#ctor(System.Threading.Tasks.TaskCompletionSource{System.Boolean}@,System.Threading.CancellationToken@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.SocketClient.AsyncOperationToken" /> struct.
            </summary>
            <param name="completionSource">
            The completion source to trigger when the socket operation completes.
            </param>
            <param name="cancellationToken">
            The cancellation token to observe during the operation.
            </param>
        </member>
        <member name="T:NetSharp.Sockets.SocketClient.AsyncReceiveToken">
            <summary>
            A state token for asynchronous incoming network IO operations.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketClient.AsyncReceiveToken.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken" /> associated with the network IO operation.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketClient.AsyncReceiveToken.CompletionSource">
            <summary>
            The completion source which wraps the event-based APM, and provides an awaitable <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.AsyncReceiveToken.#ctor(System.Threading.Tasks.TaskCompletionSource{NetSharp.Utils.TransmissionResult}@,System.Threading.CancellationToken@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.SocketClient.AsyncReceiveToken" /> struct.
            </summary>
            <param name="completionSource">
            The completion source to trigger when the IO operation completes.
            </param>
            <param name="cancellationToken">
            The cancellation token to observe during the operation.
            </param>
        </member>
        <member name="T:NetSharp.Sockets.SocketClient.AsyncSendToken">
            <summary>
            A state token for asynchronous outgoing network IO operations.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketClient.AsyncSendToken.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken" /> associated with the network IO operation.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketClient.AsyncSendToken.CompletionSource">
            <summary>
            The completion source which wraps the event-based APM, and provides an awaitable <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketClient.AsyncSendToken.RentedBuffer">
            <summary>
            The rented buffer which holds the user's data.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketClient.AsyncSendToken.#ctor(System.Threading.Tasks.TaskCompletionSource{NetSharp.Utils.TransmissionResult}@,System.Byte[]@,System.Threading.CancellationToken@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.SocketClient.AsyncSendToken" /> struct.
            </summary>
            <param name="completionSource">
            The completion source to trigger when the IO operation completes.
            </param>
            <param name="rentedBuffer">
            The buffer holding the user's data.
            </param>
            <param name="cancellationToken">
            The cancellation token to observe during the operation.
            </param>
        </member>
        <member name="T:NetSharp.Sockets.SocketConnection">
            <summary>
            Abstract base class for clients and servers.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketConnection.BufferPool">
            <summary>
            Pools arrays to function as temporary buffers during network read/write operations.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketConnection.TransmissionArgsPool">
            <summary>
            Pools <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> objects for use during network read/write operations and calls to
            <see cref="T:System.Net.Sockets.Socket" />.XXXAsync( <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" />) methods.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketConnection.Connection">
            <summary>
            The underlying <see cref="T:System.Net.Sockets.Socket" /> which provides access to network operations.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.#ctor(System.Net.Sockets.AddressFamily@,System.Net.Sockets.SocketType@,System.Net.Sockets.ProtocolType@,System.Int32@,System.UInt16@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.SocketConnection" /> class.
            </summary>
            <param name="connectionAddressFamily">
            The address family for the underlying socket.
            </param>
            <param name="connectionSocketType">
            The socket type for the underlying socket.
            </param>
            <param name="connectionProtocolType">
            The protocol type for the underlying socket.
            </param>
            <param name="pooledBufferMaxSize">
            The maximum size in bytes of buffers held in the buffer pool.
            </param>
            <param name="preallocatedTransmissionArgs">
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> objects to initially preallocate.
            </param>
        </member>
        <member name="P:NetSharp.Sockets.SocketConnection.LocalEndPoint">
            <summary>
            The local endpoint to which the underlying <see cref="T:System.Net.Sockets.Socket" /> is bound.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.CanTransmissionArgsBeReused(System.Net.Sockets.SocketAsyncEventArgs@)">
            <summary>
            Delegate method used to check whether the given used <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance can be reused by the
            <see cref="F:NetSharp.Sockets.SocketConnection.TransmissionArgsPool" />. If this method returns <c>true</c>, <see cref="M:NetSharp.Sockets.SocketConnection.ResetTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)" /> is called on the given
            <paramref name="args" />. Otherwise, <see cref="M:NetSharp.Sockets.SocketConnection.DestroyTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)" /> is called.
            </summary>
            <param name="args">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance to check.
            </param>
            <returns>
            Whether the given <paramref name="args" /> should be reset and reused, or should be destroyed.
            </returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.CreateTransmissionArgs">
            <summary>
            Delegate method used to construct fresh <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances for use in the <see cref="F:NetSharp.Sockets.SocketConnection.TransmissionArgsPool" />.
            The resulting instance should register <see cref="M:NetSharp.Sockets.SocketConnection.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)" /> as an event handler for the
            <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event.
            </summary>
            <returns>
            The configured <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance.
            </returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.DestroyTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Delegate method to destroy used <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances that cannot be reused by the
            <see cref="F:NetSharp.Sockets.SocketConnection.TransmissionArgsPool" />. This method should deregister <see cref="M:NetSharp.Sockets.SocketConnection.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)" /> as an event handler for the
            <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event.
            </summary>
            <param name="remoteConnectionArgs">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> which should be destroyed.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and unmanaged resources used by the <see cref="T:NetSharp.Sockets.SocketConnection" /> class.
            </summary>
            <param name="disposing">
            Whether this call was made by a call to <see cref="M:NetSharp.Sockets.SocketConnection.Dispose" />.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Delegate method to handle asynchronous network IO completion via the <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event.
            </summary>
            <param name="sender">
            The object which raised the event.
            </param>
            <param name="args">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance associated with the asynchronous network IO.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.ResetTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Delegate method used to reset used <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances for later reuse by the <see cref="F:NetSharp.Sockets.SocketConnection.TransmissionArgsPool" />.
            </summary>
            <param name="args">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance that should be reset.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.Bind(System.Net.EndPoint@)">
            <summary>
            Binds the underlying socket.
            </summary>
            <param name="localEndPoint">
            The end point to which the socket should be bound.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.SocketConnection.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shuts down the underlying socket.
            </summary>
            <param name="how">
            Which socket transmission functions should be shut down on the socket.
            </param>
        </member>
        <member name="T:NetSharp.Sockets.SocketServerPacketHandler">
            <summary>
            Represents a method for serving request packets. This method should not throw any errors.
            </summary>
            <param name="requestPacket">
            The request packet received by the server.
            </param>
            <param name="clientEndPoint">
            The client from which the packet was received.
            </param>
            <returns>
            The response packet which should be sent out to the client. If no packet should be sent out, this method must return <see cref="F:NetSharp.Packets.NetworkPacket.NullPacket" />.
            </returns>
        </member>
        <member name="T:NetSharp.Sockets.SocketServer">
            <summary>
            Abstract base class for servers.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.SocketServer.PacketHandler">
            <summary>
            The packet handler delegate to use to respond to incoming requests.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketServer.#ctor(System.Net.Sockets.AddressFamily@,System.Net.Sockets.SocketType@,System.Net.Sockets.ProtocolType@,NetSharp.Sockets.SocketServerPacketHandler@,System.Int32@,System.UInt16@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.SocketServer" /> class.
            </summary>
            <param name="connectionAddressFamily">
            The address family that the underlying connection should use.
            </param>
            <param name="connectionSocketType">
            The socket type that the underlying connection should use.
            </param>
            <param name="connectionProtocolType">
            The protocol type that the underlying connection should use.
            </param>
            <param name="packetHandler">
            The packet handler delegate to use to respond to incoming requests.
            </param>
            <param name="pooledBufferMaxSize">
            The maximum size in bytes of buffers held in the buffer pool.
            </param>
            <param name="preallocatedTransmissionArgs">
            The number of transmission args to preallocate.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.SocketServer.DefaultPacketHandler(NetSharp.Packets.NetworkPacket@,System.Net.EndPoint@)">
            <summary>
            The default request packet handler for servers. Simply echoes back any received packets.
            </summary>
            <param name="request">
            The request packet that was received.
            </param>
            <param name="remoteEndPoint">
            The client from which the packet was received.
            </param>
            <returns>
            The received packet.
            </returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketServer.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the server, handling requests from clients, until the <paramref name="cancellationToken" /> has its cancellation requested.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken" /> upon whose cancellation the server should shut down.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the server's execution.
            </returns>
        </member>
        <member name="T:NetSharp.Sockets.Stream.StreamSocketClientOptions">
            <summary>
            Provides additional configuration options for a <see cref="T:NetSharp.Sockets.Stream.StreamSocketClient" /> instance.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Stream.StreamSocketClientOptions.Defaults">
            <summary>
            The default configuration.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Stream.StreamSocketClientOptions.PreallocatedTransmissionArgs">
            <summary>
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances that should be preallocated for use in the
            <see cref="M:NetSharp.Sockets.Stream.StreamSocketClient.SendAsync(System.Net.EndPoint@,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)" /> and <see cref="M:NetSharp.Sockets.Stream.StreamSocketClient.ReceiveAsync(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClientOptions.#ctor(System.UInt16)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.Stream.StreamSocketClientOptions" /> struct.
            </summary>
            <param name="preallocatedTransmissionArgs">
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances to preallocate.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.CanTransmissionArgsBeReused(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.CreateTransmissionArgs">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.DestroyTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.ResetTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.Receive(System.Net.EndPoint@,System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.ReceiveAsync(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.Send(System.Net.EndPoint@,System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketClient.SendAsync(System.Net.EndPoint@,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Sockets.Stream.StreamSocketServerOptions">
            <summary>
            Provides additional configuration options for a <see cref="T:NetSharp.Sockets.Stream.StreamSocketServer" /> instance.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Stream.StreamSocketServerOptions.Defaults">
            <summary>
            The default configuration.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Stream.StreamSocketServerOptions.ConcurrentAcceptCalls">
            <summary>
            The number of <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> calls that will be 'in-flight' at any one time, and ready to service incoming client
            connection requests. This should be set according to the number of client which will be attempting to connect at once.
            </summary>
        </member>
        <member name="F:NetSharp.Sockets.Stream.StreamSocketServerOptions.PreallocatedTransmissionArgs">
            <summary>
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances that should be preallocated for use in the <see cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> and
            <see cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> methods.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServerOptions.#ctor(System.Int32,System.UInt16)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.Stream.StreamSocketServerOptions" /> struct.
            </summary>
            <param name="concurrentAcceptCalls">
            The number of <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> calls which should be 'in-flight' at any one time.
            </param>
            <param name="preallocatedTransmissionArgs">
            The number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances to preallocate.
            </param>
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServer.#ctor(System.Net.Sockets.AddressFamily@,System.Net.Sockets.ProtocolType@,NetSharp.Sockets.SocketServerPacketHandler@,System.Nullable{NetSharp.Sockets.Stream.StreamSocketServerOptions}@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Sockets.Stream.StreamSocketServer" /> class.
            </summary>
            <param name="serverOptions">
            Additional options to configure the server.
            </param>
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServer.CanTransmissionArgsBeReused(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServer.CreateTransmissionArgs">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServer.DestroyTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServer.HandleIoCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServer.ResetTransmissionArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Sockets.Stream.StreamSocketServer.RunAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Utils.BiDictionary`2">
            <summary>
            Represents a concurrent two-way dictionary, that can be indexed by either a key or a value.
            </summary>
            <typeparam name="K">
            The type of key that will be stored.
            </typeparam>
            <typeparam name="V">
            The type of value that will be stored.
            </typeparam>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.keyToValueMap">
            <summary>
            Maps keys to their corresponding values.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap">
            <summary>
            Maps values to their corresponding keys.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.BiDictionary`2" /> class.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`1)">
            <summary>
            Indexes this instance with the given value.
            </summary>
            <param name="index">
            The value whose key to get or set.
            </param>
            <returns>
            The fetched key.
            </returns>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`0)">
            <summary>
            Indexes this instance with the given key.
            </summary>
            <param name="index">
            The key whose value to get or set.
            </param>
            <returns>
            The fetched value.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.Clear">
            <summary>
            Clears this instance's <see cref="F:NetSharp.Utils.BiDictionary`2.keyToValueMap" /> and <see cref="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap" />.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsKey(`0@)">
            <summary>
            Whether this instance contains the given key.
            </summary>
            <param name="key">
            The key to check.
            </param>
            <returns>
            Whether the given key was found.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsValue(`1@)">
            <summary>
            Whether this instance contains the given value.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            Whether the given value was found.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateKey(`1,`0)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to set.
            </param>
            <param name="key">
            The new value for the value's associated key.
            </param>
            <returns>
            Whether the new key was correctly set.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateValue(`0,`1)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to set.
            </param>
            <param name="value">
            The new value for the key's associated value.
            </param>
            <returns>
            Whether the new value was correctly set.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearKey(`1@,`0@)">
            <summary>
            Attempts to remove the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to remove.
            </param>
            <param name="key">
            The old key value.
            </param>
            <returns>
            Whether the given value had a valid key associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearValue(`0@,`1@)">
            <summary>
            Attempts to remove the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to remove.
            </param>
            <param name="value">
            The old value.
            </param>
            <returns>
            Whether the given key had a valid valid associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetKey(`1@,`0@)">
            <summary>
            Attempts to get the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to get.
            </param>
            <param name="key">
            The returned key.
            </param>
            <returns>
            Whether the given value has a valid key associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            Attempts to get the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to get.
            </param>
            <param name="value">
            The returned value.
            </param>
            <returns>
            Whether the given key as a valid value associated with it.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetKey(`1@,`0@)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">
            The value whose key to set.
            </param>
            <param name="key">
            The key which should be set for the given value.
            </param>
            <returns>
            Whether the given value was successfully set.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetValue(`0@,`1@)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">
            The key whose value to set.
            </param>
            <param name="value">
            The value which should be set for the given key.
            </param>
            <returns>
            Whether the given key was successfully set.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.Conversion.EndianAwareBitConverter">
            <summary>
            Wraps the <see cref="T:System.BitConverter" /> class to provide conversion that is endian-aware.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ReverseAsNeeded(System.Span{System.Byte},System.Boolean)">
            <summary>
            Reverses the given bytes if the endian-nes doesn't match.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Boolean)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Char,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Char)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Double,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Double)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Single,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Single)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToBoolean(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToChar(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToDouble(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt16(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToSingle(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt16(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1">
            <summary>
            Provides a lightweight implementation of an object pool for classes.
            </summary>
            <typeparam name="T">
            The type of item stored in the pool.
            </typeparam>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.ResetObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.DestroyObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.CanRebufferObjectPredicate@,System.Collections.Concurrent.IProducerConsumerCollection{`0}@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1" /> class.
            </summary>
            <param name="createDelegate">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="resetDelegate">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroyDelegate">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
            <param name="rebufferPredicate">
            The delegate method to use to decide whether an instance can be reused.
            </param>
            <param name="baseCollection">
            The underlying pooled object buffer to use.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.ResetObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.DestroyObjectDelegate@,NetSharp.Utils.SlimObjectPool{`0}.CanRebufferObjectPredicate@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1" /> class.
            </summary>
            <param name="createDelegate">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="resetDelegate">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroyDelegate">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
            <param name="rebufferPredicate">
            The delegate method to use to decide whether an instance can be reused.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CanRebufferObjectPredicate">
            <summary>
            Delegate method to check whether the given <paramref name="instance" /> can and should be placed back into the pool. If <c>true</c> is
            returned, the <paramref name="instance" /> is reset and placed back into the pool. Otherwise, the instance is destroyed.
            </summary>
            <param name="instance">
            The instance to check.
            </param>
            <returns>
            Whether the given instance should be placed back into the pool.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CreateObjectDelegate">
            <summary>
            Delegate method for creating fresh <typeparamref name="T" /> instances to be stored in the pool.
            </summary>
            <returns>
            A configured <typeparamref name="T" /> instance.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.DestroyObjectDelegate">
            <summary>
            Delegate method to destroy a used <paramref name="instance" /> which cannot be reused.
            </summary>
            <param name="instance">
            The instance to destroy.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.ResetObjectDelegate">
            <summary>
            Delegate method to reset a used <paramref name="instance" /> before placing it back into the pool.
            </summary>
            <param name="instance">
            The instance which should be reset.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Rent">
            <summary>
            Leases a new <typeparamref name="T" /> instance from the pool, and returns it.
            </summary>
            <returns>
            The <typeparamref name="T" /> instance which was fetched from the pool.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Return(`0)">
            <summary>
            Returns a previously leased <typeparamref name="T" /> instance to the pool.
            </summary>
            <param name="instance">
            The previously leased instance which should be returned.
            </param>
        </member>
        <member name="T:NetSharp.Utils.TransmissionResult">
            <summary>
            Represents the result of a socket transmission.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Timeout">
            <summary>
            Represents an asynchronous transmission which timed out.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Buffer">
            <summary>
            The byte buffer that was transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Count">
            <summary>
            The number of bytes that were transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.RemoteEndPoint">
            <summary>
            The remote endpoint to which the buffer was transmitted.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.#ctor(System.Net.Sockets.SocketAsyncEventArgs@)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.TransmissionResult" /> struct.
            </summary>
            <param name="args">
            The socket arguments associated with the transmission.
            </param>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.#ctor(System.Byte[]@,System.Int32@,System.Net.EndPoint@)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.TransmissionResult" /> struct.
            </summary>
            <param name="buffer">
            The buffer associated with the transmission.
            </param>
            <param name="count">
            The number of bytes written to or read from the buffer.
            </param>
            <param name="remoteEndPoint">
            The remote end point associated with the transmission.
            </param>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.TimedOut">
            <summary>
            Checks whether this instance represents a timed out transmission.
            </summary>
            <returns>
            Whether this instance has timed out.
            </returns>
        </member>
    </members>
</doc>
