<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSharp</name>
    </assembly>
    <members>
        <member name="T:NetSharp.Interfaces.IRawNetworkReader">
            <summary>
            Describes the methods and properties that a raw network reader (i.e. binary server) must implement.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IRawNetworkReader.Shutdown">
            <summary>
            Stops queuing up new asynchronous read operations. Does not terminate existing asynchronous operations; the underlying socket must be
            terminated to cancel all current 'in-flight' asynchronous operations.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IRawNetworkReader.Start(System.UInt16)">
            <summary>
            Queues up <paramref name="concurrentTasks" /> new asynchronous read operations.
            </summary>
            <param name="concurrentTasks">
            The number of asynchronous read operation to queue up.
            </param>
        </member>
        <member name="T:NetSharp.Interfaces.IRawNetworkWriter">
            <summary>
            Describes the methods and properties that a raw network writer (i.e. binary client) must implement.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IRawNetworkWriter.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <summary>
            Reads bytes from the network until either the given <paramref name="readBuffer" /> is filled, or a single datagram has been received.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint from which to receive bytes. Ignored for stream connections, where the connected socket's remote endpoint is used instead.
            </param>
            <param name="readBuffer">
            The buffer into which to place any received bytes.
            </param>
            <param name="flags">
            The <see cref="T:System.Net.Sockets.SocketFlags" /> associated with the network operation.
            </param>
            <returns>
            The number of bytes of data read from the remote connection.
            </returns>
        </member>
        <member name="M:NetSharp.Interfaces.IRawNetworkWriter.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <summary>
            Asynchronously reads bytes from the network until either the given <paramref name="readBuffer" /> is filled, or a single datagram has been received.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint from which to receive bytes. Ignored for stream connections, where the connected socket's remote endpoint is used instead.
            </param>
            <param name="readBuffer">
            The buffer into which to place any received bytes.
            </param>
            <param name="flags">
            The <see cref="T:System.Net.Sockets.SocketFlags" /> associated with the network operation.
            </param>
            <returns>
            The number of bytes of data read from the remote connection.
            </returns>
        </member>
        <member name="M:NetSharp.Interfaces.IRawNetworkWriter.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <summary>
            Writes bytes in the given <paramref name="writeBuffer" /> to the network. If using a datagram connection, make sure that the
            <paramref name="writeBuffer" /> size doesn't exceed the max datagram size for that transport.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint to which to send bytes. Ignored for stream connections, where the connected socket's remote endpoint is used instead.
            </param>
            <param name="writeBuffer">
            The buffer whose contents to send.
            </param>
            <param name="flags">
            The <see cref="T:System.Net.Sockets.SocketFlags" /> associated with the network operation.
            </param>
            <returns>
            The number of bytes of data sent to the remote endpoint.
            </returns>
        </member>
        <member name="M:NetSharp.Interfaces.IRawNetworkWriter.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <summary>
            Asynchronously writes bytes in the given <paramref name="writeBuffer" /> to the network. If using a datagram connection, make sure that
            the <paramref name="writeBuffer" /> size doesn't exceed the max datagram size for that transport.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint to which to send bytes. Ignored for stream connections, where the connected socket's remote endpoint is used instead.
            </param>
            <param name="writeBuffer">
            The buffer whose contents to send.
            </param>
            <param name="flags">
            The <see cref="T:System.Net.Sockets.SocketFlags" /> associated with the network operation.
            </param>
            <returns>
            The number of bytes of data sent to the remote endpoint.
            </returns>
        </member>
        <member name="T:NetSharp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.RawDatagramNetworkReaderRentedBufferSizeError">
            <summary>
              Looks up a localized string similar to Cannot rent a temporary buffer of size: {0} bytes. The maximum temporary buffer size is {1} bytes.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.RawDatagramSizeError">
            <summary>
              Looks up a localized string similar to The datagram size must be between 0 and 65507 bytes.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.RawStreamMessageSizeUnderflow">
            <summary>
              Looks up a localized string similar to The maximum pooled message size must be greater than 0 bytes.
            </summary>
        </member>
        <member name="P:NetSharp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="T:NetSharp.Raw.Datagram.RawDatagramRequestHandler">
            <summary>
            Represents a method that handles a request received by a <see cref="T:NetSharp.Raw.Datagram.RawDatagramNetworkReader" />.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint from which the request was received.
            </param>
            <param name="requestBuffer">
            The buffer containing the received request.
            </param>
            <param name="receivedRequestBytes">
            The number of bytes of user data received in the request.
            </param>
            <param name="responseBuffer">
            The buffer into which the response should be written.
            </param>
            <returns>
            Whether there exists a response to be sent back to the remote endpoint.
            </returns>
        </member>
        <member name="T:NetSharp.Raw.Datagram.RawDatagramNetworkReader">
            <summary>
            Implements a raw network reader using a datagram-based protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.#ctor(System.Net.Sockets.Socket@,NetSharp.Raw.Datagram.RawDatagramRequestHandler,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc cref="M:NetSharp.Raw.RawNetworkReaderBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)" />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkReader.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.Datagram.RawDatagramNetworkWriter">
            <summary>
            Implements a raw network writer using a datagram-based protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc cref="M:NetSharp.Raw.RawNetworkWriterBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)"/>
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Datagram.RawDatagramNetworkWriter.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.RawNetworkConnectionBase">
            <summary>
            Defines fields and methods common to all network connections.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.RawNetworkConnectionBase.DefaultMaxPooledBufferSize">
            <summary>
            The maximum size of a pooled buffer that can be used with the <see cref="P:System.Buffers.ArrayPool`1.Shared" /> property, before a new custom pool must
            be created. Taken from: https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Buffers/ConfigurableArrayPool.cs.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.RawNetworkConnectionBase.DefaultMaxPooledBuffersPerBucket">
            <summary>
            The maximum number of pooled buffers per bucket that can be used with the <see cref="P:System.Buffers.ArrayPool`1.Shared" /> property, before a new custom
            pool must be created. Taken from: https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Buffers/ConfigurableArrayPool.cs.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.RawNetworkConnectionBase.MaxDatagramSize">
            <summary>
            The maximum size that a user supplied data buffer can be to fit into a UDP datagram.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Raw.RawNetworkConnectionBase" /> class.
            </summary>
            <param name="rawConnection">
            The underlying <see cref="T:System.Net.Sockets.Socket" /> to use for the connection.
            </param>
            <param name="defaultEndPoint">
            The default endpoint to use to represent remote clients.
            </param>
            <param name="maxPooledBufferSize">
            The maximum size of a pooled buffer.
            </param>
            <param name="pooledBuffersPerBucket">
            The number of pooled buffers to hold in a single pool bucket.
            </param>
            <param name="preallocatedStateObjects">
            The number of state objects to preallocate.
            </param>
        </member>
        <member name="P:NetSharp.Raw.RawNetworkConnectionBase.ArgsPool">
            <summary>
            The object pool to use to pool <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instances.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.RawNetworkConnectionBase.BufferPool">
            <summary>
            The object pool to use to pool byte buffer instance.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.RawNetworkConnectionBase.Connection">
            <summary>
            The underlying connection socket.
            </summary>
        </member>
        <member name="P:NetSharp.Raw.RawNetworkConnectionBase.DefaultEndPoint">
            <summary>
            The default endpoint to use to represent remote clients.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc cref="T:NetSharp.Utils.SlimObjectPool`1.CanReuseObjectPredicate" />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.CleanupTransmissionBufferAndState(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Performs cleanup on the given <paramref name="args" /> instance. Neither the given <paramref name="args"/> instance, nor the
            <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.MemoryBuffer" /> attached to it can be used after this call.
            </summary>
            <param name="args">
            The used <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> that can be cleaned up to be reused.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.CreateStateObject">
            <inheritdoc cref="T:NetSharp.Utils.SlimObjectPool`1.CreateObjectDelegate" />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc cref="T:NetSharp.Utils.SlimObjectPool`1.DestroyObjectDelegate" />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.Dispose(System.Boolean)">
            <summary>
            Allows for inheritors to dispose of their own resources.
            </summary>
            <param name="disposing">
            Whether the <see cref="M:NetSharp.Raw.RawNetworkConnectionBase.Dispose" /> method is being called.
            </param>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkConnectionBase.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc cref="T:NetSharp.Utils.SlimObjectPool`1.ResetObjectDelegate" />
        </member>
        <member name="T:NetSharp.Raw.RawNetworkReaderBase">
            <summary>
            Provides fields and methods common to all network reader connections.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc cref="M:NetSharp.Raw.RawNetworkConnectionBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)"/>
        </member>
        <member name="P:NetSharp.Raw.RawNetworkReaderBase.ShutdownToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken" /> for the network reader.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkReaderBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.RawNetworkWriterBase">
            <summary>
            Provides fields and methods common to all network writer connections.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc cref="M:NetSharp.Raw.RawNetworkConnectionBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)"/>
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.RawNetworkWriterBase.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.Stream.RawStreamRequestHandler">
            <summary>
            Represents a method that handles a request received by a <see cref="T:NetSharp.Raw.Stream.RawStreamNetworkReader" />.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint from which the request was received.
            </param>
            <param name="requestBuffer">
            The buffer containing the received request.
            </param>
            <param name="receivedRequestBytes">
            The number of bytes of user data received in the request.
            </param>
            <param name="responseBuffer">
            The buffer into which the response should be written.
            </param>
            <returns>
            Whether there exists a response to be sent back to the remote endpoint.
            </returns>
        </member>
        <member name="T:NetSharp.Raw.Stream.RawStreamNetworkReader">
            <summary>
            Implements a raw network reader using a stream-based protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.#ctor(System.Net.Sockets.Socket@,NetSharp.Raw.Stream.RawStreamRequestHandler,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc cref="M:NetSharp.Raw.RawNetworkReaderBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)"/>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.Start(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkReader.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.Stream.RawStreamNetworkWriter">
            <summary>
            Implements a raw network writer using a stream-based protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc cref="M:NetSharp.Raw.RawNetworkWriterBase.#ctor(System.Net.Sockets.Socket@,System.Net.EndPoint,System.Int32,System.Int32,System.UInt32)" />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.Read(System.Net.EndPoint@,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.ReadAsync(System.Net.EndPoint,System.Memory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.Write(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.WriteAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.CanReuseStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.CreateStateObject">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.DestroyStateObject(System.Net.Sockets.SocketAsyncEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamNetworkWriter.ResetStateObject(System.Net.Sockets.SocketAsyncEventArgs@)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Raw.Stream.RawStreamPacket">
            <summary>
            Provides helper methods to manipulate the binary packet format used by stream network handlers.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamPacket.Serialise(System.Memory{System.Byte}@,NetSharp.Raw.Stream.RawStreamPacketHeader@,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            Serialises the given <paramref name="packetHeader" /> and <paramref name="packetData" /> into the given <paramref name="buffer" />.
            </summary>
            <param name="buffer">
            The buffer into which the packet should be serialised. Must be at least of size <see cref="F:NetSharp.Raw.Stream.RawStreamPacketHeader.TotalSize" /> + the size
            of the user data given by <paramref name="packetHeader" />.
            </param>
            <param name="packetHeader">
            The header containing metatdata abut the raw stream packet.
            </param>
            <param name="packetData">
            The user data held in the raw stream packet.
            </param>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamPacket.TotalPacketSize(NetSharp.Raw.Stream.RawStreamPacketHeader@)">
            <summary>
            Calculates the total size of a raw stream packet, using the packet data size in the given <paramref name="packetHeader" />.
            </summary>
            <param name="packetHeader">
            The header for which to calculate the total packet size.
            </param>
            <returns>
            The total size of a raw stream packet with the given <paramref name="packetHeader" />.
            </returns>
        </member>
        <member name="T:NetSharp.Raw.Stream.RawStreamPacketHeader">
            <summary>
            Holds metadata about a raw stream packet.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.Stream.RawStreamPacketHeader.TotalSize">
            <summary>
            The total size of the header in bytes.
            </summary>
        </member>
        <member name="F:NetSharp.Raw.Stream.RawStreamPacketHeader.DataSize">
            <summary>
            The size of the user supplied data segment in bytes.
            </summary>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamPacketHeader.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Raw.Stream.RawStreamPacketHeader"/> struct.
            </summary>
            <param name="dataSize">
            The size of the user supplied data segment.
            </param>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamPacketHeader.Deserialise(System.Memory{System.Byte}@)">
            <summary>
            Deserialises a <see cref="T:NetSharp.Raw.Stream.RawStreamPacketHeader" /> instance from the given <paramref name="buffer" />.
            </summary>
            <param name="buffer">
            A buffer containing a serialised <see cref="T:NetSharp.Raw.Stream.RawStreamPacketHeader" /> instance. Must be at least of size <see cref="F:NetSharp.Raw.Stream.RawStreamPacketHeader.TotalSize" />.
            </param>
            <returns>
            The deserialised instance.
            </returns>
        </member>
        <member name="M:NetSharp.Raw.Stream.RawStreamPacketHeader.Serialise(System.Memory{System.Byte}@)">
            <summary>
            Serialises the current <see cref="T:NetSharp.Raw.Stream.RawStreamPacketHeader" /> instance into the given <paramref name="buffer" />.
            </summary>
            <param name="buffer">
            The buffer into which to serialise the current instance. Must be at least of size <see cref="F:NetSharp.Raw.Stream.RawStreamPacketHeader.TotalSize" />.
            </param>
        </member>
        <member name="T:NetSharp.Utils.Conversion.EndianAwareBitConverter">
            <summary>
            Wraps the <see cref="T:System.BitConverter" /> class to provide conversion that is endian-aware.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Boolean)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Char,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Char)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Double,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Double)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Single,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Single)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt32)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt64)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt16)" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToBoolean(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToChar(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToDouble(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt16(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToSingle(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt16(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ReverseAsNeeded(System.Span{System.Byte},System.Boolean)">
            <summary>
            Reverses the given bytes if the endian-nes doesn't match.
            </summary>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1">
            <summary>
            Provides a lightweight implementation of an object pool for classes.
            </summary>
            <typeparam name="T">
            The type of item stored in the pool.
            </typeparam>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.#ctor(NetSharp.Utils.SlimObjectPool{`0}.CreateObjectDelegate,NetSharp.Utils.SlimObjectPool{`0}.ResetObjectDelegate,NetSharp.Utils.SlimObjectPool{`0}.DestroyObjectDelegate,NetSharp.Utils.SlimObjectPool{`0}.CanReuseObjectPredicate)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.SlimObjectPool`1"/> class.
            </summary>
            <param name="createDelegate">
            The delegate method to use to create new pooled object instances.
            </param>
            <param name="resetDelegate">
            The delegate method to use to reset used pooled object instances.
            </param>
            <param name="destroyDelegate">
            The delegate method to use to destroy pooled object instances that cannot be reused.
            </param>
            <param name="rebufferPredicate">
            The delegate method to use to decide whether an instance can be reused.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CanReuseObjectPredicate">
            <summary>
            Delegate method to check whether the given <paramref name="instance" /> can and should be placed back into the pool. If <c>true</c> is
            returned, the <paramref name="instance" /> is reset and placed back into the pool. Otherwise, the instance is destroyed.
            </summary>
            <param name="instance">
            The instance to check.
            </param>
            <returns>
            Whether the given instance should be placed back into the pool.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.CreateObjectDelegate">
            <summary>
            Delegate method for creating fresh <typeparamref name="T" /> instances to be stored in the pool.
            </summary>
            <returns>
            A configured <typeparamref name="T" /> instance.
            </returns>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.DestroyObjectDelegate">
            <summary>
            Delegate method to destroy a used <paramref name="instance" /> which cannot be reused.
            </summary>
            <param name="instance">
            The instance to destroy.
            </param>
        </member>
        <member name="T:NetSharp.Utils.SlimObjectPool`1.ResetObjectDelegate">
            <summary>
            Delegate method to reset a used <paramref name="instance" /> before placing it back into the pool.
            </summary>
            <param name="instance">
            The instance which should be reset.
            </param>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Rent">
            <summary>
            Leases a new <typeparamref name="T" /> instance from the pool, and returns it.
            </summary>
            <returns>
            The <typeparamref name="T" /> instance which was fetched from the pool.
            </returns>
        </member>
        <member name="M:NetSharp.Utils.SlimObjectPool`1.Return(`0)">
            <summary>
            Returns a previously leased <typeparamref name="T" /> instance to the pool.
            </summary>
            <param name="instance">
            The previously leased instance which should be returned.
            </param>
        </member>
    </members>
</doc>
