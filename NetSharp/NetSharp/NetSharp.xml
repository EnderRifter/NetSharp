<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSharp</name>
    </assembly>
    <members>
        <member name="M:NetSharp.Connection.Finalize">
            <summary>
            Destroys a <see cref="T:NetSharp.Connection"/> class instance, freeing all managed resources.
            </summary>
        </member>
        <member name="F:NetSharp.Connection.loggerLockObject">
            <summary>
            Lock synchronisation object for the <see cref="F:NetSharp.Connection.logger"/> variable.
            </summary>
        </member>
        <member name="F:NetSharp.Connection.ShutdownToken">
            <summary>
            Cancellation token which allows observing the shutdown of the server. It is set when <see cref="M:NetSharp.Connection.Shutdown"/> is called.
            </summary>
        </member>
        <member name="F:NetSharp.Connection.logger">
            <summary>
            A logger object allowing for writing debug messages to an output stream.
            </summary>
        </member>
        <member name="M:NetSharp.Connection.Dispose(System.Boolean)">
            <summary>
            Disposes of the managed and unmanaged resources held by this instance.
            </summary>
            <param name="disposing">Whether this method is called by <see cref="M:NetSharp.Connection.Dispose"/> or by the finaliser.</param>
        </member>
        <member name="M:NetSharp.Connection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Connection.RunAsync">
            <summary>
            Makes the connection listen for incoming client request packets, and handle them according to registered packet handler delegates.
            This work can be cancelled by calling <see cref="M:NetSharp.Connection.Shutdown"/>.
            </summary>
            <returns>The task representing the connection work.</returns>
        </member>
        <member name="M:NetSharp.Connection.SetLoggingStream(System.IO.Stream,NetSharp.Logging.LogLevel)">
            <summary>
            Configures the logger to log messages to the given stream (or to <see cref="F:System.IO.Stream.Null"/> if <c>null</c>) and
            to only log messages that are of severity <paramref name="minimumLoggedSeverity"/> or higher.
            </summary>
            <param name="loggingStream">The stream to which messages will be logged.</param>
            <param name="minimumLoggedSeverity">The minimum severity a message must be to be logged.</param>
        </member>
        <member name="M:NetSharp.Connection.Shutdown">
            <summary>
            Shuts down the connection, and releases managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:NetSharp.Connection.TryBind(System.Net.EndPoint,System.TimeSpan)">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local endpoint. Blocks.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Connection.TryBindAsync(System.Net.EndPoint,System.TimeSpan)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local endpoint. Does not block.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="T:NetSharp.ConnectionBuilder">
            <summary>
            Allows for configuring and subsequently building a <see cref="T:NetSharp.Connection"/> instance.
            </summary>
        </member>
        <member name="P:NetSharp.ConnectionBuilder.IncomingPacketPipelineStageCount">
            <summary>
            The number of stages in the currently configured incoming packet pipeline.
            </summary>
        </member>
        <member name="P:NetSharp.ConnectionBuilder.OutgoingPacketPipelineStageCount">
            <summary>
            The number of stages in the currently configured outgoing packet pipeline.
            </summary>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.Build">
            <summary>
            Returns a new <see cref="T:NetSharp.Connection"/> instance with the current configuration.
            </summary>
            <returns>The configured <see cref="T:NetSharp.Connection"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <see cref="M:NetSharp.ConnectionBuilder.WithSocket(NetSharp.ConnectionBuilder.SocketSettings)"/> has not been called.
            </exception>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.WithIncomingPipelineStage(System.Func{System.Memory{System.Byte},System.Memory{System.Byte}}@,System.Int32)">
            <summary>
            Adds an extra pipeline stage to the currently configured incoming packet pipeline, at the given index.
            </summary>
            <param name="transform">
            The transformation that should be applied when a packet passes through the pipeline.
            </param>
            <param name="index">The position in the pipeline at which to place the transform.</param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.WithLogging(NetSharp.ConnectionBuilder.LoggingSettings)">
            <summary>
            Sets the logging settings for the currently configured connection.
            </summary>
            <param name="settings">The logging settings to use.</param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.WithOutgoingPipelineStage(System.Func{System.Memory{System.Byte},System.Memory{System.Byte}}@,System.Int32)">
            <summary>
            Adds an extra pipeline stage to the currently configured outgoing packet pipeline, at the given index.
            </summary>
            <param name="transform">
            The transformation that should be applied when a packet passes through the pipeline.
            </param>
            <param name="index">The position in the pipeline at which to place the transform.</param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.WithPooling(NetSharp.ConnectionBuilder.PoolingSettings)">
            <summary>
            Sets the pooling settings for the currently configured connection.
            </summary>
            <param name="settings">The pooling settings to use.</param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.WithSocket(NetSharp.ConnectionBuilder.SocketSettings)">
            <summary>
            Sets the socket settings for the currently configured connection.
            </summary>
            <param name="settings">The socket settings to use.</param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="T:NetSharp.ConnectionBuilder.LoggingSettings">
            <summary>
            Holds settings for configuring a connection's logging.
            </summary>
        </member>
        <member name="F:NetSharp.ConnectionBuilder.LoggingSettings.LoggingStream">
            <summary>
            The stream to which messages will be logged.
            </summary>
        </member>
        <member name="F:NetSharp.ConnectionBuilder.LoggingSettings.MinimumLevel">
            <summary>
            The minimum severity that a log message must have to be recorded.
            </summary>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.LoggingSettings.#ctor(System.IO.Stream,NetSharp.Logging.LogLevel)">
            <summary>
            Initialises a new instance of the <see cref="F:NetSharp.ConnectionBuilder.LoggingSettings.LoggingStream"/> struct.
            </summary>
            <param name="stream">The stream to which messages will be logged..</param>
            <param name="minimumLevel">The minimum severity that a log message must have to be recorded.</param>
        </member>
        <member name="T:NetSharp.ConnectionBuilder.PoolingSettings">
            <summary>
            Holds settings for configuring a connection's buffer pooling.
            </summary>
        </member>
        <member name="F:NetSharp.ConnectionBuilder.PoolingSettings.ObjectPoolSize">
            <summary>
            The number of objects that will be held in the object pools.
            </summary>
        </member>
        <member name="F:NetSharp.ConnectionBuilder.PoolingSettings.PreallocateBuffers">
            <summary>
            Whether the buffers for receiving messages should be preallocated.
            </summary>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.PoolingSettings.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.ConnectionBuilder.PoolingSettings"/> struct.
            </summary>
            <param name="poolSize">The number of objects that will be held in the object pools.</param>
            <param name="preallocateBuffers">Whether the buffers for receiving messages should be preallocated.</param>
        </member>
        <member name="T:NetSharp.ConnectionBuilder.SocketSettings">
            <summary>
            Holds settings fo configuring a connection's underlying socket.
            </summary>
        </member>
        <member name="F:NetSharp.ConnectionBuilder.SocketSettings.AddressFamily">
            <summary>
            The address family for the socket underlying the connection.
            </summary>
        </member>
        <member name="F:NetSharp.ConnectionBuilder.SocketSettings.ProtocolType">
            <summary>
            The socket type for the socket underlying the connection.
            </summary>
        </member>
        <member name="F:NetSharp.ConnectionBuilder.SocketSettings.SocketType">
            <summary>
            The protocol type for the socket underlying the connection.
            </summary>
        </member>
        <member name="M:NetSharp.ConnectionBuilder.SocketSettings.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.ConnectionBuilder.SocketSettings"/> struct.
            </summary>
            <param name="addressFamily">The address family for the underlying socket.</param>
            <param name="socketType">The socket type for the underlying socket.</param>
            <param name="protocolType">The protocol type for the underlying socket.</param>
        </member>
        <member name="T:NetSharp.Deprecated.Client">
            <summary>
            Provides methods for connecting to and talking with a <see cref="T:NetSharp.Deprecated.IServer"/> instance.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Client.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.Client"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Client.Finalize">
            <summary>
            Destroys an instance of the <see cref="T:NetSharp.Deprecated.Client"/> class.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Client.socket">
            <summary>
            The <see cref="T:System.Net.Sockets.Socket"/> underlying the connection.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Client.socketOptions">
            <summary>
            Backing field for the <see cref="P:NetSharp.Deprecated.Client.SocketOptions"/> property.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Client.remoteEndPoint">
            <summary>
            The remote endpoint with which this client communicates.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Client.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.Client"/> class.
            </summary>
            <param name="socketType">The socket type for the underlying socket.</param>
            <param name="protocolType">The protocol type for the underlying socket.</param>
            <param name="socketManager">The <see cref="!:Utils.Socket_Options.SocketOptions"/> manager to use.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Client.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:NetSharp.Deprecated.Client"/> instance.
            </summary>
            <param name="disposing">Whether this instance is being disposed.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Client.OnConnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.Client.Connected"/> event.
            </summary>
            <param name="endPoint">The remote endpoint with which a connection was made.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Client.OnDisconnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.Client.Disconnected"/> event.
            </summary>
            <param name="endPoint">The remote endpoint with which a connection was lost.</param>
        </member>
        <member name="E:NetSharp.Deprecated.Client.Connected">
            <inheritdoc />
        </member>
        <member name="E:NetSharp.Deprecated.Client.Disconnected">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.Client.SocketOptions">
            <summary>
            The configured socket options for the underlying connection.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Client.Disconnect">
            <summary>
            Disconnects the client from the remote endpoint.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Client.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Client.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Client.SendComplexAsync``2(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Client.SendSimpleAsync``1(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Client.TryBindAsync(System.Net.IPAddress,System.Nullable{System.Int32},System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Client.TryConnectAsync(System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.ClientExtensions">
            <summary>
            Provides additional methods and functionality to the <see cref="T:NetSharp.Deprecated.Client"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendBytes(NetSharp.Deprecated.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint. Blocks until the bytes are all sent, and does
            not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendBytes(NetSharp.Deprecated.Client,System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint. Blocks until the bytes are all sent, whilst
            observing a timeout of the given length.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">The timeout after which to cancel the transmission attempt.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendBytesAsync(NetSharp.Deprecated.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint asynchronously. Does not block, and does not
            timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendBytesWithResponse(NetSharp.Deprecated.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response. Blocks until the
            bytes are all sent and the response has been received, and does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <returns>The byte buffer that was received as a response.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendBytesWithResponse(NetSharp.Deprecated.Client,System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response. Blocks until the
            bytes are all sent and the response has been received, whilst observing a timeout of the given length.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">The timeout after which to cancel the transmission attempt.</param>
            <returns>The byte buffer that was received as a response.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendBytesWithResponseAsync(NetSharp.Deprecated.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response asynchronously.
            Does not block, and does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <returns>The byte buffer received as a response to the sent buffer.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendComplex``2(NetSharp.Deprecated.Client,``0)">
            <summary>
            Sends the given request and listens for a response of the given type. Blocks until the response is received.
            Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendComplex``2(NetSharp.Deprecated.Client,``0,System.TimeSpan)">
            <summary>
            Sends the given request and listens for a response of the given type. Blocks until the response is received.
            Cancels the operation if the given timeout is exceeded.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendComplexAsync``2(NetSharp.Deprecated.Client,``0)">
            <summary>
            Sends the given request and listens for a response of the given type asynchronously. Does not block. Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendSimple``1(NetSharp.Deprecated.Client,``0)">
            <summary>
            Sends the given request without listening for a response, blocking until it is sent. Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendSimple``1(NetSharp.Deprecated.Client,``0,System.TimeSpan)">
            <summary>
            Sends the given request without listening for a response, blocking until it is sent.
            Cancels the operation if the given timeout is exceeded.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.SendSimpleAsync``1(NetSharp.Deprecated.Client,``0)">
            <summary>
            Sends the given request asynchronously without listening for a response, not blocking until it is sent.
            Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.TryBind(NetSharp.Deprecated.Client,System.Net.IPAddress,System.Nullable{System.Int32})">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local address and port. Blocks. Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.TryBind(NetSharp.Deprecated.Client,System.Net.IPAddress,System.Nullable{System.Int32},System.TimeSpan)">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local address and port. Blocks.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.TryBindAsync(NetSharp.Deprecated.Client,System.Net.IPAddress,System.Nullable{System.Int32})">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local address and port. Does not block.
            Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.TryConnect(NetSharp.Deprecated.Client,System.Net.IPAddress,System.Int32)">
            <summary>
            Attempts to connect to the remote <see cref="T:NetSharp.Deprecated.Server"/> at the given <see cref="T:System.Net.IPAddress"/> and over the
            given port. Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.TryConnect(NetSharp.Deprecated.Client,System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <summary>
            Attempts to connect to the remote <see cref="T:NetSharp.Deprecated.Server"/> at the given <see cref="T:System.Net.IPAddress"/> and over the
            given port. If the timeout is exceeded the connection attempt is aborted and the method returns false.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <param name="timeout">The timeout within which to attempt the connection.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.ClientExtensions.TryConnectAsync(NetSharp.Deprecated.Client,System.Net.IPAddress,System.Int32)">
            <summary>
            Attempts to connect asynchronously to the remote <see cref="T:NetSharp.Deprecated.Server"/> at the given <see cref="T:System.Net.IPAddress"/>
            and over the given port. Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="T:NetSharp.Deprecated.DefaultSocketOptions">
            <summary>
            Allows for manipulation of socket options.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.DefaultSocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.DefaultSocketOptions.HopLimit">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
            This property is not supported when using the default socket option manager.
            </exception>
        </member>
        <member name="P:NetSharp.Deprecated.DefaultSocketOptions.IsRoutingEnabled">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
            This property is not supported when using the default socket option manager.
            </exception>
        </member>
        <member name="P:NetSharp.Deprecated.DefaultSocketOptions.UseLoopback">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
            This property is not supported when using the default socket option manager.
            </exception>
        </member>
        <member name="T:NetSharp.Deprecated.IClient">
            <summary>
            Describes a client capable of asynchronous communication with an <see cref="T:NetSharp.Deprecated.IServer"/> connection.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.IClient.Connected">
            <summary>
            Signifies that a connection with the remote endpoint has been made.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.IClient.Disconnected">
            <summary>
            Signifies that the connection with the remote endpoint was severed.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.IClient.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint asynchronously. Does not block, and observes
            a timeout of the given length.
            timeout.
            </summary>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">The timeout after which to cancel the transmission attempt.</param>
            <returns>Whether the transmission attempt was successful.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IClient.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response asynchronously.
            Does not block, and observes a timeout of the given length.
            timeout.
            </summary>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">
            The timeout after which to cancel the transmission attempt. This timeout is reused by both the 'send' and
            'receive' parts of the transmission attempt, such that the maximum timeout is equal to 2 times the given
            value.
            </param>
            <returns>The byte buffer received as a response to the sent buffer.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IClient.SendComplexAsync``2(``0,System.TimeSpan)">
            <summary>
            Sends the given request and listens for a response of the given type asynchronously. Does not block.
            Cancels the operation if the given timeout is exceeded
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IClient.SendSimpleAsync``1(``0,System.TimeSpan)">
            <summary>
            Sends the given request asynchronously without listening for a response, not blocking until it is sent.
            Cancels the operation if the given timeout is exceeded.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
            <returns>Whether the transmission attempt was successful.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IClient.TryBindAsync(System.Net.IPAddress,System.Nullable{System.Int32},System.TimeSpan)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local address and port. Does not block.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IClient.TryConnectAsync(System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <summary>
            Attempts to connect asynchronously to the remote <see cref="T:NetSharp.Deprecated.Server"/> at the given <see cref="T:System.Net.IPAddress"/>
            and over the given port. If the timeout is exceeded the connection attempt is aborted and the method returns false.
            </summary>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <param name="timeout">The timeout within which to attempt the connection.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="T:NetSharp.Deprecated.INetworkSerialisable">
            <summary>
            Describes an object that can be serialised to be sent across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.INetworkSerialisable.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialises the object instance from a byte array.
            </summary>
            <param name="serialisedObject">The memory containing the serialised object instance.</param>
        </member>
        <member name="M:NetSharp.Deprecated.INetworkSerialisable.Serialise">
            <summary>
            Serialises the object instance into a byte array.
            </summary>
            <returns>The memory containing the serialised object instance.</returns>
        </member>
        <member name="T:NetSharp.Deprecated.IPacket">
            <summary>
            Describes the methods and properties that every packet
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.IPacket.AfterDeserialisation">
            <summary>
            Allows for custom fields to be converted from their serialised format, after being received from the network.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.IPacket.BeforeSerialisation">
            <summary>
            Allows for custom fields to be converted into another format prior to being sent via the network.
            </summary>
        </member>
        <member name="T:NetSharp.Deprecated.IPacketHandler">
            <summary>
            Describes a class capable of registering and deregistering packet handlers, and capable of
            handling incoming packets according to the currently registered packet handlers.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.IPacketHandler.TryDeregisterComplexPacketHandler``2(NetSharp.Deprecated.ComplexPacketHandler{``0,``1}@)">
            <summary>
            Attempts to deregister the complex packet handler delegate for all packets of the given type. If a handler
            method doesn't exist for the given packet type, <paramref name="oldHandlerDelegate"/> will be <c>default</c>.
            </summary>
            <typeparam name="Req">The type of request packet for which to deregister the handler delegate.</typeparam>
            <typeparam name="Rep">The type of response packet that is generated by the delegate method.</typeparam>
            <param name="oldHandlerDelegate">The old handler delegate method that was previously registered.</param>
            <returns>Whether the packet handler delegate was successfully deregistered.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IPacketHandler.TryDeregisterSimplePacketHandler``1(NetSharp.Deprecated.SimplePacketHandler{``0}@)">
            <summary>
            Attempts to deregister the simple packet handler delegate for all packets of the given type. If a handler
            method doesn't exist for the given packet type, <paramref name="oldHandlerDelegate"/> will be <c>default</c>.
            </summary>
            <typeparam name="Req">The type of request packet for which to deregister the handler delegate.</typeparam>
            <param name="oldHandlerDelegate">The old handler delegate method that was previously registered.</param>
            <returns>Whether the packet handler delegate was successfully deregistered.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IPacketHandler.TryRegisterComplexPacketHandler``2(NetSharp.Deprecated.ComplexPacketHandler{``0,``1})">
            <summary>
            Attempts to register a complex packet handler delegate for all packets of the given type. If a handler
            method already exists for the given packet type, it will be updated and replaced with the given one.
            </summary>
            <typeparam name="Req">The type of request packet for which to register the handler delegate.</typeparam>
            <typeparam name="Rep">The type of response packet that is generated by the delegate method.</typeparam>
            <param name="handlerDelegate">The delegate method to register as the complex packet handler.</param>
            <returns>Whether the packet handler delegate was successfully registered.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.IPacketHandler.TryRegisterSimplePacketHandler``1(NetSharp.Deprecated.SimplePacketHandler{``0})">
            <summary>
            Attempts to register a simple packet handler delegate for all packets of the given type. If a handler
            method already exists for the given packet type, it will be updated and replaced with the given one.
            </summary>
            <typeparam name="Req">The type of request packet for which to register the handler delegate.</typeparam>
            <param name="handlerDelegate">The delegate method to register as the simple packet handler.</param>
            <returns>Whether the packet handler delegate was successfully registered.</returns>
        </member>
        <member name="T:NetSharp.Deprecated.IRequestPacket">
            <summary>
            Describes a request packet.
            </summary>
        </member>
        <member name="T:NetSharp.Deprecated.IResponsePacket`1">
            <summary>
            Describes a response packet to a request packet.
            </summary>
            <typeparam name="TReq">The request packet that this type is a response to.</typeparam>
        </member>
        <member name="P:NetSharp.Deprecated.IResponsePacket`1.RequestPacket">
            <summary>
            The request packet that was handled with this response packet.
            </summary>
        </member>
        <member name="T:NetSharp.Deprecated.IServer">
            <summary>
            Describes a server capable of asynchronously handling multiple <see cref="T:NetSharp.Deprecated.IClient"/> connections at once.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.IServer.ClientConnected">
            <summary>
            Signifies that a connection with a remote endpoint has been made.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.IServer.ClientDisconnected">
            <summary>
            Signifies that a connection with a remote endpoint has been lost.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.IServer.ServerStarted">
            <summary>
            Signifies that the server was started and clients will start being accepted.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.IServer.ServerStopped">
            <summary>
            Signifies that the server was stopped and clients will stop being accepted.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.IServer.RunAsync(System.Net.EndPoint)">
            <summary>
            Starts the server asynchronously and starts accepting client connections. Does not block.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
        </member>
        <member name="M:NetSharp.Deprecated.IServer.Shutdown">
            <summary>
            Shuts down the server.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.SerialisedPacket.From``1(``0)">
            <summary>
            Serialises the given serialisable packet instance and returns the <see cref="T:NetSharp.Deprecated.SerialisedPacket"/> instance
            that was generated. This method invokes <see cref="M:NetSharp.Deprecated.IPacket.BeforeSerialisation"/>.
            </summary>
            <typeparam name="T">The packet type that will be serialised.</typeparam>
            <param name="serialisable">The packet instance that should be serialised.</param>
            <returns>The serialised instance.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.SerialisedPacket.To``1(NetSharp.Deprecated.SerialisedPacket@)">
            <summary>
            Deserialises and returns a packet instance of the given type from the <see cref="T:NetSharp.Deprecated.SerialisedPacket"/> instance
            that was given. This method invokes <see cref="M:NetSharp.Deprecated.IPacket.AfterDeserialisation"/>.
            </summary>
            <typeparam name="T">The packet type to which the packet should be deserialised.</typeparam>
            <param name="instance">The serialised packet instance that should be deserialised.</param>
            <returns>The deserialised instance.</returns>
        </member>
        <member name="T:NetSharp.Deprecated.ComplexPacketHandler`2">
            <summary>
            Represents a method that receives a request packet of the given type (<typeparamref name="TReq"/>) and
            handles the request, returning a response packet of the given type (<typeparamref name="TRep"/>).
            </summary>
            <typeparam name="TReq">The type of request packet handled by this delegate method.</typeparam>
            <typeparam name="TRep">The type of response packet returned by this delegate method.</typeparam>
            <param name="requestPacket">The request packet that should be handled by this delegate method.</param>
            <param name="remoteEndPoint">The remote endpoint from which the request originated.</param>
            <returns>The response packet to send back to the remote endpoint from which the request originated.</returns>
        </member>
        <member name="T:NetSharp.Deprecated.SimplePacketHandler`1">
            <summary>
            Represents a method that receives a simple request packet of the given type (<typeparamref name="TReq"/>) and
            handles the request, not returning any response packets.
            </summary>
            <typeparam name="TReq">The type of request packet handled by this delegate method.</typeparam>
            <param name="requestPacket">The request packet that should be handled by this delegate method.</param>
            <param name="remoteEndPoint">The remote endpoint from which the request originated.</param>
        </member>
        <member name="T:NetSharp.Deprecated.Server">
            <summary>
            Provides methods for handling connected <see cref="T:NetSharp.Deprecated.IClient"/> instances.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.complexPacketHandlers">
            <summary>
            Maps a packet type id to the complex packet handler for that packet type.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.requestPacketDeserialisers">
            <summary>
            Maps a packet type id to the raw packet deserialiser that deserialises raw packets to
            <see cref="T:NetSharp.Deprecated.IRequestPacket"/> implementors.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.serverShutdownCancellationTokenSource">
            <summary>
            Cancellation token source to stop handling client sockets when the server should be shut down.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.simplePacketHandlers">
            <summary>
            Maps a packet type id to the simple packet handler for that packet type.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.Server"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.Finalize">
            <summary>
            Destroys an instance of the <see cref="T:NetSharp.Deprecated.Server"/> class.
            </summary>
        </member>
        <member name="T:NetSharp.Deprecated.Server.RawRequestPacketDeserialiser">
            <summary>
            Represents a method that receives a raw packet, and deserialises it into an <see cref="T:NetSharp.Deprecated.IRequestPacket"/> implementor.
            </summary>
            <param name="rawPacket">The raw packet that was received from the network.</param>
            <returns>The deserialised instance of the packet.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.Server.RegisterInternalPacketHandlers">
            <summary>
            Registers packet handlers for every internal library packet.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.PendingConnectionBacklog">
            <summary>
            The maximum number of connections that are allowed in the connection backlog.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.DefaultNetworkOperationTimeout">
            <summary>
            The default timeout value for all network operations.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.serverShutdownCancellationToken">
            <summary>
            The cancellation token that will be set when the server must be shut down.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.socket">
            <summary>
            The <see cref="T:System.Net.Sockets.Socket"/> underlying the connection.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.socketOptions">
            <summary>
            Backing field for the <see cref="P:NetSharp.Deprecated.Server.SocketOptions"/> property.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.runServer">
            <summary>
            Whether the server should be ran.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.Server"/> class.
            </summary>
            <param name="socketType">The socket type for the underlying socket.</param>
            <param name="protocolType">The protocol type for the underlying socket.</param>
            <param name="socketManager">The <see cref="!:Utils.Socket_Options.SocketOptions"/> implementation to use.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Server.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.TimeSpan)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.Server"/> class.
            </summary>
            <param name="socketType">The socket type for the underlying socket.</param>
            <param name="protocolType">The protocol type for the underlying socket.</param>
            <param name="socketManager">The <see cref="!:Utils.Socket_Options.SocketOptions"/> manager to use.</param>
            <param name="networkOperationTimeout">The timeout value for send and receive operations over the network.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Server.DeserialiseRequestPacket(System.UInt32,NetSharp.Deprecated.SerialisedPacket@)">
            <summary>
            Deserialises the given <see cref="T:NetSharp.Packets.NetworkPacket"/> struct into an <see cref="T:NetSharp.Deprecated.IRequestPacket"/> implementor.
            </summary>
            <param name="packetType">The type id of packet that we should deserialise to.</param>
            <param name="rawRequestPacket">The packet that should be deserialised.</param>
            <returns>The deserialised packet instance, cast to the <see cref="T:NetSharp.Deprecated.IRequestPacket"/> interface.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.Server.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:NetSharp.Deprecated.Server"/> instance.
            </summary>
            <param name="disposing">Whether this instance is being disposed.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Server.DoHandleClientAsync(System.Object)">
            <summary>
            Provides a task that represents the handling of a client. Calls the abstract <see cref="M:NetSharp.Deprecated.Server.HandleClientAsync(NetSharp.Deprecated.Server.ClientHandlerArgs,System.Threading.CancellationToken)"/> method.
            </summary>
            <param name="clientHandlerArgsObj">The object representing the passed <see cref="T:NetSharp.Deprecated.Server.ClientHandlerArgs"/> instance.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Server.HandleClientAsync(NetSharp.Deprecated.Server.ClientHandlerArgs,System.Threading.CancellationToken)">
            <summary>
            Handles a client asynchronously.
            </summary>
            <param name="args">The client handler arguments that should be passed to the client handler.</param>
            <param name="cancellationToken">Cancellation token set when the server is shutting down.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Server.HandleRequestPacket(System.UInt32,NetSharp.Deprecated.IRequestPacket@,System.Net.EndPoint@)">
            <summary>
            Handles the given request packet with a registered packet handler. In this case, a complex packet handler
            will override any registered simple packet handlers.
            </summary>
            <param name="packetType">The type id of the packet that we should handle.</param>
            <param name="requestPacket">The packet instance that should be handled.</param>
            <param name="remoteEndPoint">The remote endpoint from which the request packet originated.</param>
            <returns>The response packet that should be sent back to the remote endpoint.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.Server.OnClientConnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.Server.ClientConnected"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint with which a connection was made.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Server.OnClientDisconnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.Server.ClientDisconnected"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint with which a connection was lost.</param>
        </member>
        <member name="M:NetSharp.Deprecated.Server.OnServerStarted">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.Server.ServerStarted"/> event.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.OnServerStopped">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.Server.ServerStopped"/> event.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.TryBind(System.Net.EndPoint,System.TimeSpan)">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local endpoint. Blocks.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.Server.TryBindAsync(System.Net.EndPoint,System.TimeSpan)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local endpoint. Does not block.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="T:NetSharp.Deprecated.Server.ClientHandlerArgs">
            <summary>
            Holds information about the arguments passed to every client handler task.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.ClientHandlerArgs.#ctor(System.Net.EndPoint,System.Net.Sockets.Socket)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.Server.ClientHandlerArgs"/> struct.
            </summary>
            <param name="remoteEndPoint">The remote endpoint of the client that should be handled.</param>
            <param name="handlerSocket">The handler socket of the client that should be handled.</param>
        </member>
        <member name="F:NetSharp.Deprecated.Server.ClientHandlerArgs.ClientEndPoint">
            <summary>
            The remote endpoint for the client being handled.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.Server.ClientHandlerArgs.ClientSocket">
            <summary>
            The client handler socket for the client being handled. Is only set if using TCP.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.ClientHandlerArgs.ForTcpClientHandler(System.Net.Sockets.Socket@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Deprecated.Server.ClientHandlerArgs"/> for a TCP client.
            </summary>
            <returns>A new instance of the <see cref="T:NetSharp.Deprecated.Server.ClientHandlerArgs"/>, setup for a TCP client.</returns>
        </member>
        <member name="M:NetSharp.Deprecated.Server.ClientHandlerArgs.ForUdpClientHandler(System.Net.EndPoint@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Deprecated.Server.ClientHandlerArgs"/> for a UDP client.
            </summary>
            <returns>A new instance of the <see cref="T:NetSharp.Deprecated.Server.ClientHandlerArgs"/>, setup for a UDP client.</returns>
        </member>
        <member name="E:NetSharp.Deprecated.Server.ClientConnected">
            <summary>
            Signifies that a connection with a remote endpoint has been made.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.Server.ClientDisconnected">
            <summary>
            Signifies that a connection with a remote endpoint has been lost.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.Server.ServerStarted">
            <summary>
            Signifies that the server was started and clients will start being accepted.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.Server.ServerStopped">
            <summary>
            Signifies that the server was stopped and clients will stop being accepted.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.Server.NetworkOperationTimeout">
            <summary>
            The timeout value for network operations such as sending bytes or receiving bytes over the network.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.Server.SocketOptions">
            <summary>
            The configured socket options for the underlying connection.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.Server.RunAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Server.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Server.TryDeregisterComplexPacketHandler``2(NetSharp.Deprecated.ComplexPacketHandler{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Server.TryDeregisterSimplePacketHandler``1(NetSharp.Deprecated.SimplePacketHandler{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Server.TryRegisterComplexPacketHandler``2(NetSharp.Deprecated.ComplexPacketHandler{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.Server.TryRegisterSimplePacketHandler``1(NetSharp.Deprecated.SimplePacketHandler{``0})">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.ServerClientConnection">
            <summary>
            Base class for connections, holding methods shared between the <see cref="T:NetSharp.Deprecated.Client"/> and <see cref="T:NetSharp.Deprecated.Server"/> classes.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.ServerClientConnection.logger">
            <summary>
            The logger to which the server can log messages.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.ServerClientConnection.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.ServerClientConnection"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.ServerClientConnection.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:NetSharp.Deprecated.ServerClientConnection"/> instance.
            </summary>
            <param name="disposing">Whether this instance is being disposed.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ServerClientConnection.OnBytesReceived(System.Net.EndPoint,System.Int32)">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.ServerClientConnection.BytesReceived"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint from which the bytes were received.</param>
            <param name="bytesReceived">The number of bytes that were received from the remote endpoint.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ServerClientConnection.OnBytesSent(System.Net.EndPoint,System.Int32)">
            <summary>
            Invokes the <see cref="E:NetSharp.Deprecated.ServerClientConnection.BytesSent"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint to which the bytes were sent.</param>
            <param name="bytesSent">The number of bytes that were sent to the remote endpoint.</param>
        </member>
        <member name="E:NetSharp.Deprecated.ServerClientConnection.BytesReceived">
            <summary>
            Signifies that some data has been received from the remote endpoint.
            </summary>
        </member>
        <member name="E:NetSharp.Deprecated.ServerClientConnection.BytesSent">
            <summary>
            Signifies that some data was sent to the remote endpoint.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.ServerClientConnection.ChangeLoggingStream(System.IO.Stream,NetSharp.Logging.LogLevel)">
            <summary>
            Makes the client log to the given stream.
            </summary>
            <param name="loggingStream">The stream that new messages should be logged to.</param>
            <param name="minimumMessageSeverityLevel">
            The minimum severity level that new messages must have to be logged to the stream.
            </param>
        </member>
        <member name="M:NetSharp.Deprecated.ServerClientConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.ServerExtensions">
            <summary>
            Provides additional methods and functionality to the <see cref="T:NetSharp.Deprecated.Server"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.ServerExtensions.Run(NetSharp.Deprecated.Server,System.Net.IPAddress,System.Int32)">
            <summary>
            Starts the server synchronously and starts accepting client connections. Blocks.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ServerExtensions.Run(NetSharp.Deprecated.Server,System.Net.IPAddress)">
            <summary>
            Starts the server synchronously and starts accepting client connections. Blocks. Uses the default connection port.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ServerExtensions.RunAsync(NetSharp.Deprecated.Server,System.Net.IPAddress)">
            <summary>
            Starts the server asynchronously and starts accepting client connections. Does not block. Uses the default
            connection port.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
        </member>
        <member name="M:NetSharp.Deprecated.ServerExtensions.RunAsync(NetSharp.Deprecated.Server,System.Net.IPAddress,System.Int32)">
            <summary>
            Starts the server asynchronously and starts accepting client connections. Does not block.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
        </member>
        <member name="T:NetSharp.Deprecated.SocketOptions">
            <summary>
            Allows for manipulation of socket options.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.SocketOptions.managedSocket">
            <summary>
            The <see cref="T:System.Net.Sockets.Socket"/> instance whose settings are being managed.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.SocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Deprecated.SocketOptions"/> class.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> instance whose options should be managed.</param>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.DualMode">
            <summary>
            Whether this <see cref="T:System.Net.Sockets.Socket"/> can operate in dual IPv4 / IPv6 mode.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.ForceFlush">
            <summary>
            Whether sending a packet flushes underlying <see cref="T:System.Net.Sockets.NetworkStream"/>.
            </summary>
            <remarks>
            This value is only used in a <see cref="T:System.Net.Sockets.TcpClient"/> instance, which uses a <see cref="T:System.Net.Sockets.NetworkStream"/>
            to send and receive data. A <see cref="T:System.Net.Sockets.UdpClient"/> is unaffected by this value.
            </remarks>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.Fragment">
            <summary>
            Whether this <see cref="T:System.Net.Sockets.Socket"/> is allowed to fragment frames that are too large to send in one go.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.HopLimit">
            <summary>
            The hop limit for packets sent by this <see cref="T:System.Net.Sockets.Socket"/>. Comparable to IPv4s TTL (Time To Live).
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.IsChecksumEnabled">
            <summary>
            Whether a checksum should be created for each UDP packet sent.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.IsRoutingEnabled">
            <summary>
            Whether the packet should be sent directly to its destination or allowed to be routed through multiple destinations
            first.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.LocalEndPoint">
            <summary>
            The local <see cref="T:System.Net.EndPoint"/> for the <see cref="F:NetSharp.Deprecated.SocketOptions.managedSocket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.LocalIPEndPoint">
            <summary>
            The local <see cref="T:System.Net.IPEndPoint"/> for this <see cref="T:System.Net.Sockets.Socket"/> instance.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.RemoteEndPoint">
            <summary>
            The remote <see cref="T:System.Net.EndPoint"/> for the <see cref="F:NetSharp.Deprecated.SocketOptions.managedSocket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.RemoteIPEndPoint">
            <summary>
            The remote <see cref="T:System.Net.IPEndPoint"/> that this <see cref="T:System.Net.Sockets.Socket"/> instance communicates with.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.Ttl">
            <summary>
            The 'Time To Live' for this <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Deprecated.SocketOptions.UseLoopback">
            <summary>
            Whether this <see cref="T:System.Net.Sockets.Socket"/> should use a loopback address and bypass hardware.
            </summary>
        </member>
        <member name="T:NetSharp.Deprecated.TcpClient">
            <summary>
            Provides methods for TCP communication with a connected <see cref="T:NetSharp.Deprecated.TcpServer"/> instance.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.TcpClient.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.TcpClient.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.TcpClient.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.TcpClient.SendComplexAsync``2(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.TcpClient.SendSimpleAsync``1(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.TcpServer">
            <summary>
            Provides methods for TCP communication with connected <see cref="T:NetSharp.Deprecated.TcpClient"/> instances.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.TcpServer.HandleClientAsync(NetSharp.Deprecated.Server.ClientHandlerArgs,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.TcpServer.#ctor(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.TcpServer.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.TcpServer.RunAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.TcpSocketOptions">
            <summary>
            Allows for manipulation of TCP socket options.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.TcpSocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.TcpSocketOptions.HopLimit">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.TcpSocketOptions.IsRoutingEnabled">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.TcpSocketOptions.UseLoopback">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.UdpClient">
            <summary>
            Provides methods for UDP communication with a connected <see cref="T:NetSharp.Deprecated.UdpServer"/> instance.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.UdpClient.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.UdpClient.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.UdpClient.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.UdpClient.SendComplexAsync``2(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.UdpClient.SendSimpleAsync``1(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.UdpServer">
            <summary>
            Provides methods for UDP communication with connected <see cref="T:NetSharp.Deprecated.UdpClient"/> instances.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.UdpServer.clientChannelOptions">
            <summary>
            The options that should be applied to every channel created to handle a client.
            </summary>
        </member>
        <member name="F:NetSharp.Deprecated.UdpServer.activeClients">
            <summary>
            Holds currently connected and active clients, as well as their current received packet queues.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.UdpServer.HandleClientAsync(NetSharp.Deprecated.Server.ClientHandlerArgs,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.UdpServer.#ctor(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.UdpServer.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Deprecated.UdpServer.RunAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Deprecated.UdpSocketOptions">
            <summary>
            Allows for manipulation of UDP socket options.
            </summary>
        </member>
        <member name="M:NetSharp.Deprecated.UdpSocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.UdpSocketOptions.HopLimit">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.UdpSocketOptions.IsRoutingEnabled">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Deprecated.UdpSocketOptions.UseLoopback">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Extensions.ConnectionBuilderExtensions">
            <summary>
            Provides additional methods and functionality to the <see cref="T:NetSharp.ConnectionBuilder"/> class.
            </summary>
        </member>
        <member name="T:NetSharp.Extensions.ConnectionExtensions">
            <summary>
            Provides additional methods and functionality to the <see cref="T:NetSharp.Connection"/> class.
            </summary>
        </member>
        <member name="T:NetSharp.Logging.LogLevel">
            <summary>
            Specifies the severity level of a log message.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Info">
            <summary>
            The logged message contains some information. Lowest severity.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Warn">
            <summary>
            The logged message contains a warning. Higher severity.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Error">
            <summary>
            The logged message contains details about an error. Higher severity.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Exception">
            <summary>
            The logged message contains details about an exception. Highest severity.
            </summary>
        </member>
        <member name="T:NetSharp.Logging.Logger">
            <summary>
            A simple logger capable of writing text to a stream.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.Logger.loggingStream">
            <summary>
            The stream to which messages will be logged.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.Logger.minimumSeverity">
            <summary>
            The minimum severity that log messages need to be logged to the underlying stream.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.Logger.writer">
            <summary>
            The text writer we will use to log messages to the underlying stream.
            </summary>
        </member>
        <member name="M:NetSharp.Logging.Logger.#ctor(System.IO.Stream,NetSharp.Logging.LogLevel)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Logging.Logger"/> struct.
            </summary>
            <param name="outputStream">The stream that the logger instance should log messages to.</param>
            <param name="minimumLogSeverity">The minimum log level that will be logged to the output stream.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Logging.Logger.Log(System.String,System.Exception,NetSharp.Logging.LogLevel)">
            <summary>
            Logs a message to the underlying stream, along with the given exception and at the given severity.
            </summary>
            <param name="message">The message that should be logged.</param>
            <param name="exception">The exception that occurred (if any).</param>
            <param name="severity">The severity of the message that is being logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogAsync(System.String,System.Exception,NetSharp.Logging.LogLevel)">
            <summary>
            Logs a message asynchronously to the underlying stream, along with the given exception and at the given severity.
            </summary>
            <param name="message">The message that should be logged.</param>
            <param name="exception">The exception that occurred (if any).</param>
            <param name="severity">The severity of the message that is being logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogError(System.String)">
            <summary>
            Logs an error to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The error that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogErrorAsync(System.String)">
            <summary>
            Logs an error to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Error"/>.
            </summary>
            <param name="message">The error that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogException(System.Exception)">
            <summary>
            Logs an exception to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogException(System.String,System.Exception)">
            <summary>
            Logs an exception to the underlying stream, along with a short debug message, with severity
            <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="message">The debug message that should be logged with the exception.</param>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogExceptionAsync(System.Exception)">
            <summary>
            Logs an exception to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogExceptionAsync(System.String,System.Exception)">
            <summary>
            Logs an exception to the underlying stream asynchronously, along with a short debug message, with severity
            <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="message">The debug message that should be logged with the exception.</param>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogMessage(System.String)">
            <summary>
            Logs a message to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The message that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogMessageAsync(System.String)">
            <summary>
            Logs a message to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The message that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogWarning(System.String)">
            <summary>
            Logs a warning to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The warning that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogWarningAsync(System.String)">
            <summary>
            Logs a warning to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Warn"/>.
            </summary>
            <param name="message">The warning that should be logged.</param>
        </member>
        <member name="T:NetSharp.Packets.Builtin.ConnectPacket">
            <summary>
            A simple connection request packet for the UDP protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.ConnectResponsePacket">
            <summary>
            A response packet for the <see cref="T:NetSharp.Packets.Builtin.ConnectPacket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Packets.Builtin.ConnectResponsePacket.RequestPacket">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.DataPacket">
            <summary>
            A simple data transfer packet, that allows for the transmission of an arbitrary number of frames.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Builtin.DataPacket.RequestBuffer">
            <summary>
            The data that should be transferred across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataPacket"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.#ctor(System.Memory{System.Byte})">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataPacket"/> class.
            </summary>
            <param name="buffer">The data that this request packet should contain.</param>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.DataResponsePacket">
            <summary>
            A response packet for the <see cref="T:NetSharp.Packets.Builtin.DataPacket"/>.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Builtin.DataResponsePacket.ResponseBuffer">
            <summary>
            The data that should be transferred across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataResponsePacket"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.#ctor(System.Memory{System.Byte})">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataResponsePacket"/> class.
            </summary>
            <param name="buffer">The data that this response packet should contain.</param>
        </member>
        <member name="P:NetSharp.Packets.Builtin.DataResponsePacket.RequestPacket">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.DisconnectPacket">
            <summary>
            A simple disconnect packet for the UDP protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.PingPacket">
            <summary>
            A simple ping request packet for heartbeat monitoring and RTT measurement.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.PingResponsePacket">
            <summary>
            A response packet for the <see cref="T:NetSharp.Packets.Builtin.PingPacket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Packets.Builtin.PingResponsePacket.RequestPacket">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.SimpleDataPacket">
            <summary>
            A simple one-time-use data transfer packet, that allows for the transmission of an arbitrary number of frames.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Builtin.SimpleDataPacket.RequestBuffer">
            <summary>
            The data that should be transferred across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.SimpleDataPacket"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.#ctor(System.Memory{System.Byte})">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.SimpleDataPacket"/> class.
            </summary>
            <param name="buffer">The data that this request packet should contain.</param>
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.NetworkErrorCode">
            <summary>
            Enumerates the possible error codes for network operations, being held in the packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkErrorCode.Ok">
            <summary>
            Signifies that there was no error during transmission.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkErrorCode.Error">
            <summary>
            A generic error occurred during packet transmission.
            </summary>
        </member>
        <member name="T:NetSharp.Packets.NetworkPacket">
            <summary>
            Represents a low-level packet that is transmitted over the network.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.#ctor(System.ReadOnlyMemory{System.Byte},NetSharp.Packets.NetworkPacketHeader,NetSharp.Packets.NetworkPacketFooter)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.NetworkPacket"/> struct.
            </summary>
            <param name="data">The data that should be transmitted in the packet.</param>
            <param name="header">The header for the packet.</param>
            <param name="footer">The footer for the packet.</param>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.DataSegmentSize">
            <summary>
            The number of bytes allocated in each packet for user data.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.FooterSize">
            <summary>
            The number of bytes taken up in each packet by its footer.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.HeaderSize">
            <summary>
            The number of bytes taken up in each packet by its header.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.PacketSize">
            <summary>
            The size of each packet, including its header, footer, and data segment.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacket.DataBuffer">
            <summary>
            The data held in this packet.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.#ctor(System.ReadOnlyMemory{System.Byte},System.Int32,System.UInt32,NetSharp.Packets.NetworkErrorCode,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.NetworkPacket"/> struct.
            </summary>
            <param name="data">The data that should be transmitted in the packet.</param>
            <param name="dataLength">The number of bytes that are held in the given data buffer.</param>
            <param name="type">The packet type.</param>
            <param name="errorCode">The error code associated with this transmission.</param>
            <param name="hasSucceedingPacket">Whether this packet has a succeeding packet in the packet chain.</param>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.Deserialise(System.Memory{System.Byte})">
            <summary>
            Deserialises the given buffer into a packet instance.
            </summary>
            <param name="buffer">The byte buffer to serialise.</param>
            <returns>The deserialised packet instance.</returns>
        </member>
        <member name="M:NetSharp.Packets.NetworkPacket.Serialise(NetSharp.Packets.NetworkPacket)">
            <summary>
            Serialises the given packet instance into a single byte buffer.
            </summary>
            <param name="instance">The packet instance to serialise.</param>
            <returns>The byte buffer that represents the packet instance.</returns>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketFooter.Size">
            <summary>
            The number of bytes taken up by a packet footer.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketHeader.Size">
            <summary>
            The number of bytes taken up by a packet header.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketHeader.DataLength">
            <summary>
            The number of bytes of data held in the packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketHeader.ErrorCode">
            <summary>
            The error code for this packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkPacketHeader.Type">
            <summary>
            The packet type.
            </summary>
        </member>
        <member name="T:NetSharp.Packets.PacketRegistry">
            <summary>
            Provides method of registering request packets and their relevant response packets, as well as mapping their ids.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.AutomaticPacketTypeIdStartPoint">
            <summary>
            The start id for automatically generated packet type ids. Any custom packet type ids lower than this value
            that come from external assemblies will be incremented by this value, to ensure that there are no clashes.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.currentAutomaticPacketTypeIdCounterLockObject">
            <summary>
            The lock object for synchronising access to the <see cref="F:NetSharp.Packets.PacketRegistry.currentAutomaticPacketTypeIdCounter"/> field.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.idToPacketTypeMap">
            <summary>
            Maps a packet type id to its relevant packet type, and vice-versa.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.LibraryAssembly">
            <summary>
            The assembly that represents the library, where all of the builtin packets are defined.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.requestToResponseMap">
            <summary>
            Maps a request packet to its relevant response packet, and vice-versa.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.currentAutomaticPacketTypeIdCounter">
            <summary>
            The current id for registered packets.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetNewPacketTypeId(System.Type)">
            <summary>
            Fetches the packet type id of the given packet type. If the packet type is declared outside of the library
            assembly, then its value is incremented by the <see cref="F:NetSharp.Packets.PacketRegistry.AutomaticPacketTypeIdStartPoint"/> value. This ensure that
            there are no clashes between the packet type ids of packets declared in the library and external packets.
            </summary>
            <param name="packetType">The packet type whose id should be fetched.</param>
            <returns>The id of the given packet type.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.DeregisterPacketType(System.Type,System.Type)">
            <summary>
            Deregisters the given packet type from the registry.
            </summary>
            <param name="requestPacketType">The request packet type to deregister, if it is registered.</param>
            <param name="responsePacketType">The response packet associated with the request packet.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.DeregisterPacketTypes(System.Collections.Generic.Dictionary{System.Type,System.Type})">
            <summary>
            Deregisters the given packet types from the registry.
            </summary>
            <param name="requestToResponsePacketTypeMap">The list of packet types to deregister, if they are registered.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetPacketId(System.Type)">
            <summary>
            Returns the packet type id associated with the given packet type.
            </summary>
            <param name="packetType">The packet type whose id to fetch.</param>
            <returns>The id of the packet type given.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetPacketId``1">
            <summary>
            Returns the packet type id associated with the given packet type.
            </summary>
            <typeparam name="TPacket">The packet type whose id to fetch.</typeparam>
            <returns>The id of the packet type given.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetPacketType(System.UInt32)">
            <summary>
            Returns the packet type associated with the given id.
            </summary>
            <param name="packetTypeId">The packet id whose mapped type to fetch.</param>
            <returns>The packet type mapped by the given id.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetRequestPacketType``1">
            <summary>
            Returns the type of request packet mapped by the given response packet type.
            </summary>
            <typeparam name="TResponse">The response packet type whose request packet type to fetch.</typeparam>
            <returns>The request packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetRequestPacketType(System.Type)">
            <summary>
            Returns the type of request packet mapped by the given response packet type.
            </summary>
            <param name="responsePacketType">The response packet type whose request packet type to fetch.</param>
            <returns>The request packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetResponsePacketType``1">
            <summary>
            Returns the type of response packet mapped by the given request packet type.
            </summary>
            <typeparam name="TRequest">The request packet type whose response packet type to fetch.</typeparam>
            <returns>The response packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetResponsePacketType(System.Type)">
            <summary>
            Returns the type of response packet mapped by the given request packet type.
            </summary>
            <param name="requestPacketType">The request packet type whose response packet type to fetch.</param>
            <returns>The response packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketSourceAssemblies(System.Reflection.Assembly[])">
            <summary>
            Rebuilds the packet registry, by registering every <see cref="T:NetSharp.Deprecated.IPacket"/> inheritor in the given assemblies.
            </summary>
            <param name="packetSourceAssemblies">
            The assemblies from which the packet types to register are sourced.
            </param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketSourceAssembly(System.Reflection.Assembly)">
            <summary>
            Registers all the <see cref="T:NetSharp.Deprecated.IPacket"/> implementors in the given assembly.
            </summary>
            <param name="packetSourceAssembly">The assembly whose packet types to register.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketType(System.Type,System.Type)">
            <summary>
            Registers the given packet type to the registry.
            </summary>
            <param name="requestPacketType">The request packet type to register, if it is not registered.</param>
            <param name="responsePacketType">The response packet associated with the request packet.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketTypes(System.Collections.Generic.Dictionary{System.Type,System.Type})">
            <summary>
            Registers the given packet types to the registry.
            </summary>
            <param name="requestToResponsePacketTypeMap">
            The dictionary mapping the request packet types to register, to their relevant response packet types.
            The response packet type can be null; then the request packet type is treated as a 'simple' packet.
            </param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.#cctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.PacketRegistry"/> class.
            </summary>
        </member>
        <member name="T:NetSharp.Packets.PacketTypeIdAttribute">
            <summary>
            Allows the placing of a custom packet type on a class or struct. This is used if the class or struct
            inherits from <see cref="T:NetSharp.Deprecated.IRequestPacket"/> or <see cref="T:NetSharp.Deprecated.IResponsePacket`1"/>.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.PacketTypeIdAttribute.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.PacketTypeIdAttribute"/> attribute.
            </summary>
            <param name="type">The custom type id that the decorated packet type should have.</param>
        </member>
        <member name="P:NetSharp.Packets.PacketTypeIdAttribute.Id">
            <summary>
            The custom type id that the decorated packet type should have. This overrides the automatically generated id.
            </summary>
        </member>
        <member name="T:NetSharp.Pipelines.PacketPipeline`3">
            <summary>
            Represents a pipeline of transformations that packets must undergo.
            </summary>
            <typeparam name="TInput">The type of packet the pipeline receives.</typeparam>
            <typeparam name="TIntermediate">The type of packet the pipeline internally handles.</typeparam>
            <typeparam name="TOutput">The type of packet the pipeline outputs.</typeparam>
        </member>
        <member name="M:NetSharp.Pipelines.PacketPipeline`3.ProcessPacket(`0)">
            <summary>
            Passes the given packet through the pipeline.
            </summary>
            <param name="inputPacket">The incoming packet.</param>
            <returns>The outgoing transformed packet.</returns>
        </member>
        <member name="T:NetSharp.Pipelines.PacketPipelineStage`2">
            <summary>
            Represents a single transformation applied to a packet traveling through the pipeline.
            </summary>
            <typeparam name="TInput">The type the transformation takes as input.</typeparam>
            <typeparam name="TOutput">The type the transformation produces as output.</typeparam>
        </member>
        <member name="T:NetSharp.Pipelines.PacketPipelineBuilder`3">
            <summary>
            Allows for configuring and subsequently building a <see cref="T:NetSharp.Pipelines.PacketPipeline`3"/> instance.
            </summary>
            <typeparam name="TInput">The type of packet that will be submitted to the pipeline.</typeparam>
            <typeparam name="TIntermediate">The type of packet that will be handled internally by the pipeline.</typeparam>
            <typeparam name="TOutput">The type of packet that will be requested from the pipeline.</typeparam>
        </member>
        <member name="M:NetSharp.Pipelines.PacketPipelineBuilder`3.Build">
            <summary>
            Returns the currently configured <see cref="T:NetSharp.Pipelines.PacketPipeline`3"/> instance.
            </summary>
            <returns>The configured <see cref="T:NetSharp.Pipelines.PacketPipeline`3"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either <see cref="M:NetSharp.Pipelines.PacketPipelineBuilder`3.WithInputStage(System.Func{`0,`1}@)"/> or <see cref="M:NetSharp.Pipelines.PacketPipelineBuilder`3.WithOutputStage(System.Func{`1,`2}@)"/> have not been called.
            </exception>
        </member>
        <member name="M:NetSharp.Pipelines.PacketPipelineBuilder`3.WithInputStage(System.Func{`0,`1}@)">
            <summary>
            Configures the input stage for the pipeline.
            </summary>
            <param name="stage">
            The transformation that should be applied to incoming packets, to convert them from the <typeparamref name="TInput"/>
            type to the <typeparamref name="TIntermediate"/> type that the pipeline handles internally.
            </param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="M:NetSharp.Pipelines.PacketPipelineBuilder`3.WithIntermediateStage(System.Func{`1,`1}@)">
            <summary>
            Adds the given intermediate stage to the pipeline.
            </summary>
            <param name="stage">
            The transformation that should be applied to packets traveling through the pipeline.
            </param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="M:NetSharp.Pipelines.PacketPipelineBuilder`3.WithOutputStage(System.Func{`1,`2}@)">
            <summary>
            Configures the output stage for the pipeline.
            </summary>
            <param name="stage">
            The transformation that should be applied to outgoing packets, to convert them from the
            <typeparamref name="TIntermediate"/> type used internally to the <typeparamref name="TOutput"/> type.
            </param>
            <returns>The builder instance for further configuration.</returns>
        </member>
        <member name="T:NetSharp.Sockets.SocketAcceptor">
            <summary>
            Helper class providing awaitable wrappers around asynchronous Accept, Connect, and Disconnect operations.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketAcceptor.AcceptAsync(System.Net.Sockets.Socket,System.Threading.CancellationToken)">
            <summary>
            Provides an awaitable wrapper around an asynchronous socket accept operation.
            </summary>
            <param name="socket">The socket which should be used to accept an incoming connection attempt.</param>
            <param name="cancellationToken">The cancellation token to observe for the operation.</param>
            <returns>The accepted socket.</returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketAcceptor.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.Threading.CancellationToken)">
            <summary>
            Provides an awaitable wrapper around an asynchronous socket connect operation.
            </summary>
            <param name="socket">The socket which should asynchronously connect to the remote endpoint.</param>
            <param name="remoteEndPoint">The remote endpoint to which the socket should connect.</param>
            <param name="cancellationToken">The cancellation token to observe for the operation.</param>
        </member>
        <member name="M:NetSharp.Sockets.SocketAcceptor.DisconnectAsync(System.Net.Sockets.Socket,System.Threading.CancellationToken)">
            <summary>
            Provides an awaitable wrapper around an asynchronous socket disconnect operation.
            </summary>
            <param name="socket">The socket which should asynchronously disconnect from its remote endpoint.</param>
            <param name="cancellationToken">The cancellation token to observe for the operation.</param>
        </member>
        <member name="T:NetSharp.Sockets.SocketReader">
            <summary>
            Helper class providing awaitable wrappers around asynchronous Receive and ReceiveFrom operations.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketReader.ReceiveAsync(System.Net.Sockets.Socket,System.Net.Sockets.SocketFlags,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Provides an awaitable wrapper around an asynchronous socket receive operation.
            </summary>
            <param name="socket">The socket which should receive data from the remote connection.</param>
            <param name="socketFlags">The socket flags associated with the receive operation.</param>
            <param name="inputBuffer">The memory buffer into which received data will be stored.</param>
            <param name="cancellationToken">The cancellation token to observe for the operation.</param>
            <returns>The result of the receive operation.</returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketReader.ReceiveFromAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.Net.Sockets.SocketFlags,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Provides an awaitable wrapper around an asynchronous socket receive operation.
            </summary>
            <param name="socket">The socket which should receive data from the remote endpoint.</param>
            <param name="remoteEndPoint">The remove endpoint from which data should be received.</param>
            <param name="socketFlags">The socket flags associated with the receive operation.</param>
            <param name="inputBuffer">The memory buffer into which received data will be stored.</param>
            <param name="cancellationToken">The cancellation token to observe for the operation.</param>
            <returns>The result of the receive operation.</returns>
        </member>
        <member name="T:NetSharp.Sockets.SocketWriter">
            <summary>
            Helper class providing awaitable wrappers around asynchronous Send and SendTo operations.
            </summary>
        </member>
        <member name="M:NetSharp.Sockets.SocketWriter.SendAsync(System.Net.Sockets.Socket,System.Net.Sockets.SocketFlags,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Provides an awaitable wrapper around an asynchronous socket send operation.
            </summary>
            <param name="socket">The socket which should send the data to its remote connection.</param>
            <param name="socketFlags">The socket flags associated with the send operation.</param>
            <param name="outputBuffer">The data buffer which should be sent.</param>
            <param name="cancellationToken">The cancellation token to observe for the operation.</param>
            <returns>The number of bytes of data which were written to the remote connection.</returns>
        </member>
        <member name="M:NetSharp.Sockets.SocketWriter.SendToAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.Net.Sockets.SocketFlags,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Provides an awaitable wrapper around an asynchronous socket send operation.
            </summary>
            <param name="socket">The socket which should send the data to the remote endpoint.</param>
            <param name="remoteEndPoint">The remote endpoint to which data should be written.</param>
            <param name="socketFlags">The socket flags associated with the send operation.</param>
            <param name="outputBuffer">The data buffer which should be sent.</param>
            <param name="cancellationToken">The cancellation token to observe for the operation.</param>
            <returns>The number of bytes of data which were written to the remote endpoint.</returns>
        </member>
        <member name="T:NetSharp.Utils.BiDictionary`2">
            <summary>
            Represents a concurrent two-way dictionary, that can be indexed by either a key or a value.
            </summary>
            <typeparam name="K">The type of key that will be stored.</typeparam>
            <typeparam name="V">The type of value that will be stored.</typeparam>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.keyToValueMap">
            <summary>
            Maps keys to their corresponding values.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap">
            <summary>
            Maps values to their corresponding keys.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.BiDictionary`2"/> class.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`1)">
            <summary>
            Indexes this instance with the given value.
            </summary>
            <param name="index">The value whose key to get or set.</param>
            <returns>The fetched key.</returns>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`0)">
            <summary>
            Indexes this instance with the given key.
            </summary>
            <param name="index">The key whose value to get or set.</param>
            <returns>The fetched value.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.Clear">
            <summary>
            Clears this instance's <see cref="F:NetSharp.Utils.BiDictionary`2.keyToValueMap"/> and <see cref="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap"/>.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsKey(`0@)">
            <summary>
            Whether this instance contains the given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Whether the given key was found.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsValue(`1@)">
            <summary>
            Whether this instance contains the given value.
            </summary>
            <param name="value">The value to check.</param>
            <returns>Whether the given value was found.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateKey(`1,`0)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">The value whose key to set.</param>
            <param name="key">The new value for the value's associated key.</param>
            <returns>Whether the new key was correctly set.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateValue(`0,`1)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="value">The new value for the  key's associated value.</param>
            <returns>Whether the new value was correctly set.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearKey(`1@,`0@)">
            <summary>
            Attempts to remove the key associated with the given value.
            </summary>
            <param name="value">The value whose key to remove.</param>
            <param name="key">The old key value.</param>
            <returns>Whether the given value had a valid key associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearValue(`0@,`1@)">
            <summary>
            Attempts to remove the value associated with the given key.
            </summary>
            <param name="key">The key whose value to remove.</param>
            <param name="value">The old value.</param>
            <returns>Whether the given key had a valid valid associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetKey(`1@,`0@)">
            <summary>
            Attempts to get the key associated with the given value.
            </summary>
            <param name="value">The value whose key to get.</param>
            <param name="key">The returned key.</param>
            <returns>Whether the given value has a valid key associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            Attempts to get the value associated with the given key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The returned value.</param>
            <returns>Whether the given key as a valid value associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetKey(`1@,`0@)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">The value whose key to set.</param>
            <param name="key">The key which should be set for the given value.</param>
            <returns>Whether the given value was successfully set.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetValue(`0@,`1@)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="value">The value which should be set for the given key.</param>
            <returns>Whether the given key was successfully set.</returns>
        </member>
        <member name="T:NetSharp.Utils.Constants">
            <summary>
            Holds internal default configurations and constants.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.Constants.DefaultPort">
            <summary>
            The default port over which a connection is made.
            </summary>
        </member>
        <member name="T:NetSharp.Utils.Conversion.EndianAwareBitConverter">
            <summary>
            Wraps the <see cref="T:System.BitConverter"/> class to provide conversion that is endian-aware.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ReverseAsNeeded(System.Span{System.Byte},System.Boolean)">
            <summary>
            Reverses the given bytes if the endian-nes doesn't match.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Boolean)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Char,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Char)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Double,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Double)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Single,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Single)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int32)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int64)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int16)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt32)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt64)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt16)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToBoolean(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToChar(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToDouble(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt16(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToSingle(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt16(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="T:NetSharp.Utils.TransmissionResult">
            <summary>
            Represents the result of a socket transmission.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.#ctor(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.TransmissionResult"/> struct.
            </summary>
            <param name="args">The socket arguments associated with the transmission.</param>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Buffer">
            <summary>
            The byte buffer that was transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Count">
            <summary>
            The number of bytes that were transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.RemoteEndPoint">
            <summary>
            The remote endpoint to which the buffer was transmitted.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.TransmissionArgs">
            <summary>
            Socket arguments and other data associated with the transmission.
            </summary>
        </member>
    </members>
</doc>
