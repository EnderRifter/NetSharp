<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSharp</name>
    </assembly>
    <members>
        <member name="T:NetSharp.Client">
            <summary>
            Provides methods for connecting to and talking with a <see cref="T:NetSharp.Interfaces.IServer"/> instance.
            </summary>
        </member>
        <member name="F:NetSharp.Client.cancellationTokenSource">
            <summary>
            Provides <see cref="T:System.Threading.CancellationToken"/> instances for cancelling methods after a timeout period.
            </summary>
        </member>
        <member name="F:NetSharp.Client.socket">
            <summary>
            The <see cref="T:System.Net.Sockets.Socket"/> underlying the connection.
            </summary>
        </member>
        <member name="F:NetSharp.Client.socketOptions">
            <summary>
            Backing field for the <see cref="P:NetSharp.Client.SocketOptions"/> property.
            </summary>
        </member>
        <member name="F:NetSharp.Client.remoteEndPoint">
            <summary>
            The remote endpoint with which this client communicates.
            </summary>
        </member>
        <member name="M:NetSharp.Client.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Client"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Client.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,NetSharp.Utils.Socket_Options.SocketOptionManager)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Client"/> class.
            </summary>
            <param name="socketType">The socket type for the underlying socket.</param>
            <param name="protocolType">The protocol type for the underlying socket.</param>
            <param name="socketManager">The <see cref="T:NetSharp.Utils.Socket_Options.SocketOptions"/> manager to use.</param>
        </member>
        <member name="M:NetSharp.Client.Finalize">
            <summary>
            Destroys an instance of the <see cref="T:NetSharp.Client"/> class.
            </summary>
        </member>
        <member name="E:NetSharp.Client.Connected">
            <inheritdoc />
        </member>
        <member name="E:NetSharp.Client.Disconnected">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Client.SocketOptions">
            <summary>
            The configured socket options for the underlying connection.
            </summary>
        </member>
        <member name="M:NetSharp.Client.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:NetSharp.Client"/> instance.
            </summary>
            <param name="disposing">Whether this instance is being disposed.</param>
        </member>
        <member name="M:NetSharp.Client.OnConnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Client.Connected"/> event.
            </summary>
            <param name="endPoint">The remote endpoint with which a connection was made.</param>
        </member>
        <member name="M:NetSharp.Client.OnDisconnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Client.Disconnected"/> event.
            </summary>
            <param name="endPoint">The remote endpoint with which a connection was lost.</param>
        </member>
        <member name="M:NetSharp.Client.Disconnect">
            <summary>
            Disconnects the client from the remote endpoint.
            </summary>
        </member>
        <member name="M:NetSharp.Client.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Client.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Client.SendComplexAsync``2(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Client.SendSimpleAsync``1(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Client.TryBindAsync(System.Net.IPAddress,System.Nullable{System.Int32},System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Client.TryConnectAsync(System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Clients.TcpClient">
            <summary>
            Provides methods for TCP communication with a connected <see cref="T:NetSharp.Servers.TcpServer"/> instance.
            </summary>
        </member>
        <member name="M:NetSharp.Clients.TcpClient.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.TcpClient.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.TcpClient.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.TcpClient.SendComplexAsync``2(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.TcpClient.SendSimpleAsync``1(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Clients.UdpClient">
            <summary>
            Provides methods for UDP communication with a connected <see cref="T:NetSharp.Servers.UdpServer"/> instance.
            </summary>
        </member>
        <member name="M:NetSharp.Clients.UdpClient.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.UdpClient.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.UdpClient.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.UdpClient.SendComplexAsync``2(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Clients.UdpClient.SendSimpleAsync``1(``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Connection">
            <summary>
            Base class for connections, holding methods shared between the <see cref="T:NetSharp.Client"/> and <see cref="T:NetSharp.Server"/> classes.
            </summary>
        </member>
        <member name="F:NetSharp.Connection.NullPacket">
            <summary>
            Represents a packet that was not received correctly.
            </summary>
        </member>
        <member name="F:NetSharp.Connection.NullTransmissionResult">
            <summary>
            Represents a transmission result of an incorrect transmission.
            </summary>
        </member>
        <member name="F:NetSharp.Connection.logger">
            <summary>
            The logger to which the server can log messages.
            </summary>
        </member>
        <member name="M:NetSharp.Connection.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Connection"/> class.
            </summary>
        </member>
        <member name="E:NetSharp.Connection.BytesReceived">
            <summary>
            Signifies that some data has been received from the remote endpoint.
            </summary>
        </member>
        <member name="E:NetSharp.Connection.BytesSent">
            <summary>
            Signifies that some data was sent to the remote endpoint.
            </summary>
        </member>
        <member name="M:NetSharp.Connection.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:NetSharp.Connection"/> instance.
            </summary>
            <param name="disposing">Whether this instance is being disposed.</param>
        </member>
        <member name="M:NetSharp.Connection.DoReceivePacketAsync(System.Net.Sockets.Socket,System.Net.Sockets.SocketFlags,System.TimeSpan)">
            <summary>
            Listens for a packet to be received asynchronously within the given timeout, and returns the received packet.
            </summary>
            <param name="remoteSocket">The remote socket from which to receive data.</param>
            <param name="socketFlags">The socket flags associated with the read operation.</param>
            <param name="timeout">
            The timespan within which to wait for a packet, returning a null packet if this limit is exceeded.
            </param>
            <returns>The packet that was received. <see cref="F:NetSharp.Connection.NullPacket"/> if not received correctly.</returns>
        </member>
        <member name="M:NetSharp.Connection.DoReceivePacketFromAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.Net.Sockets.SocketFlags,System.TimeSpan)">
            <summary>
            Listens for a packet to be received asynchronously within the given timeout, and returns the received packet.
            </summary>
            <param name="socket">The socket which will receive the packet.</param>
            <param name="remoteEndPoint">The remote endpoint from which to receive the packet.</param>
            <param name="socketFlags">The socket flags associated with the read operation.</param>
            <param name="timeout">
            The timespan within which to wait for a packet, returning a null packet if this limit is exceeded.
            </param>
            <returns>
            The packet that was received and the associated transmission result. <see cref="F:NetSharp.Connection.NullPacket"/> if not received correctly.
            </returns>
        </member>
        <member name="M:NetSharp.Connection.DoSendPacketAsync(System.Net.Sockets.Socket,NetSharp.Packets.Packet,System.Net.Sockets.SocketFlags,System.TimeSpan)">
            <summary>
            Sends the given packet asynchronously within the given timeout.
            </summary>
            <param name="remoteSocket">The remote socket to which to send the packet.</param>
            <param name="packet">The packet to send.</param>
            <param name="socketFlags">The socket flags associated with the write operation.</param>
            <param name="timeout">
            The timespan within which to send the packet, returning <c>false</c> if this limit is exceeded.
            </param>
            <returns>Whether the packet was successfully sent.</returns>
        </member>
        <member name="M:NetSharp.Connection.DoSendPacketToAsync(System.Net.Sockets.Socket,System.Net.EndPoint,NetSharp.Packets.Packet,System.Net.Sockets.SocketFlags,System.TimeSpan)">
            <summary>
            Sends the given packet asynchronously within the given timeout.
            </summary>
            <param name="socket">The socket which should send the packet.</param>
            <param name="remoteEndPoint">The remote endpoint to which to send the packet.</param>
            <param name="packet">The packet to send.</param>
            <param name="socketFlags">The socket flags associated with the write operation.</param>
            <param name="timeout">
            The timespan within which to send the packet, returning <c>false</c> if this limit is exceeded.
            </param>
            <returns>Whether the packet was successfully sent.</returns>
        </member>
        <member name="M:NetSharp.Connection.OnBytesReceived(System.Net.EndPoint,System.Int32)">
            <summary>
            Invokes the <see cref="E:NetSharp.Connection.BytesReceived"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint from which the bytes were received.</param>
            <param name="bytesReceived">The number of bytes that were received from the remote endpoint.</param>
        </member>
        <member name="M:NetSharp.Connection.OnBytesSent(System.Net.EndPoint,System.Int32)">
            <summary>
            Invokes the <see cref="E:NetSharp.Connection.BytesSent"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint to which the bytes were sent.</param>
            <param name="bytesSent">The number of bytes that were sent to the remote endpoint.</param>
        </member>
        <member name="M:NetSharp.Connection.ChangeLoggingStream(System.IO.Stream,NetSharp.Logging.LogLevel)">
            <summary>
            Makes the client log to the given stream.
            </summary>
            <param name="loggingStream">The stream that new messages should be logged to.</param>
            <param name="minimumMessageSeverityLevel">
            The minimum severity level that new messages must have to be logged to the stream.
            </param>
        </member>
        <member name="M:NetSharp.Connection.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Extensions.ClientExtensions">
            <summary>
            Provides additional methods and functionality to the <see cref="T:NetSharp.Client"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendBytes(NetSharp.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint. Blocks until the bytes are all sent, and does
            not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendBytes(NetSharp.Client,System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint. Blocks until the bytes are all sent, whilst
            observing a timeout of the given length.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">The timeout after which to cancel the transmission attempt.</param>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendBytesAsync(NetSharp.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint asynchronously. Does not block, and does not
            timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendBytesWithResponse(NetSharp.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response. Blocks until the
            bytes are all sent and the response has been received, and does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <returns>The byte buffer that was received as a response.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendBytesWithResponse(NetSharp.Client,System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response. Blocks until the
            bytes are all sent and the response has been received, whilst observing a timeout of the given length.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">The timeout after which to cancel the transmission attempt.</param>
            <returns>The byte buffer that was received as a response.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendBytesWithResponseAsync(NetSharp.Client,System.Byte[])">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response asynchronously.
            Does not block, and does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <returns>The byte buffer received as a response to the sent buffer.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendComplex``2(NetSharp.Client,``0)">
            <summary>
            Sends the given request and listens for a response of the given type. Blocks until the response is received.
            Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendComplex``2(NetSharp.Client,``0,System.TimeSpan)">
            <summary>
            Sends the given request and listens for a response of the given type. Blocks until the response is received.
            Cancels the operation if the given timeout is exceeded.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendComplexAsync``2(NetSharp.Client,``0)">
            <summary>
            Sends the given request and listens for a response of the given type asynchronously. Does not block. Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendSimple``1(NetSharp.Client,``0)">
            <summary>
            Sends the given request without listening for a response, blocking until it is sent. Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendSimple``1(NetSharp.Client,``0,System.TimeSpan)">
            <summary>
            Sends the given request without listening for a response, blocking until it is sent.
            Cancels the operation if the given timeout is exceeded.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.SendSimpleAsync``1(NetSharp.Client,``0)">
            <summary>
            Sends the given request asynchronously without listening for a response, not blocking until it is sent.
            Does not timeout.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="request">The request packet to send.</param>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.TryBind(NetSharp.Client,System.Net.IPAddress,System.Nullable{System.Int32})">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local address and port. Blocks. Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.TryBind(NetSharp.Client,System.Net.IPAddress,System.Nullable{System.Int32},System.TimeSpan)">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local address and port. Blocks.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.TryBindAsync(NetSharp.Client,System.Net.IPAddress,System.Nullable{System.Int32})">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local address and port. Does not block.
            Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.TryConnect(NetSharp.Client,System.Net.IPAddress,System.Int32)">
            <summary>
            Attempts to connect to the remote <see cref="T:NetSharp.Server"/> at the given <see cref="T:System.Net.IPAddress"/> and over the
            given port. Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.TryConnect(NetSharp.Client,System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <summary>
            Attempts to connect to the remote <see cref="T:NetSharp.Server"/> at the given <see cref="T:System.Net.IPAddress"/> and over the
            given port. If the timeout is exceeded the connection attempt is aborted and the method returns false.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <param name="timeout">The timeout within which to attempt the connection.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Extensions.ClientExtensions.TryConnectAsync(NetSharp.Client,System.Net.IPAddress,System.Int32)">
            <summary>
            Attempts to connect asynchronously to the remote <see cref="T:NetSharp.Server"/> at the given <see cref="T:System.Net.IPAddress"/>
            and over the given port. Does not timeout.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="T:NetSharp.Extensions.ServerExtensions">
            <summary>
            Provides additional methods and functionality to the <see cref="T:NetSharp.Server"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Extensions.ServerExtensions.Run(NetSharp.Server,System.Net.IPAddress,System.Int32)">
            <summary>
            Starts the server synchronously and starts accepting client connections. Blocks.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
        </member>
        <member name="M:NetSharp.Extensions.ServerExtensions.Run(NetSharp.Server,System.Net.IPAddress)">
            <summary>
            Starts the server synchronously and starts accepting client connections. Blocks. Uses the default connection port.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
        </member>
        <member name="M:NetSharp.Extensions.ServerExtensions.RunAsync(NetSharp.Server,System.Net.IPAddress)">
            <summary>
            Starts the server asynchronously and starts accepting client connections. Does not block. Uses the default
            connection port.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
        </member>
        <member name="M:NetSharp.Extensions.ServerExtensions.RunAsync(NetSharp.Server,System.Net.IPAddress,System.Int32)">
            <summary>
            Starts the server asynchronously and starts accepting client connections. Does not block.
            </summary>
            <param name="instance">The instance on which this extension method should be called.</param>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
        </member>
        <member name="T:NetSharp.Interfaces.IClient">
            <summary>
            Describes a client capable of asynchronous communication with an <see cref="T:NetSharp.Interfaces.IServer"/> connection.
            </summary>
        </member>
        <member name="E:NetSharp.Interfaces.IClient.Connected">
            <summary>
            Signifies that a connection with the remote endpoint has been made.
            </summary>
        </member>
        <member name="E:NetSharp.Interfaces.IClient.Disconnected">
            <summary>
            Signifies that the connection with the remote endpoint was severed.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IClient.SendBytesAsync(System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint asynchronously. Does not block, and observes
            a timeout of the given length.
            timeout.
            </summary>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">The timeout after which to cancel the transmission attempt.</param>
            <returns>Whether the transmission attempt was successful.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IClient.SendBytesWithResponseAsync(System.Byte[],System.TimeSpan)">
            <summary>
            Sends the given byte buffer to the connected remote endpoint and waits for the response asynchronously.
            Does not block, and observes a timeout of the given length.
            timeout.
            </summary>
            <param name="buffer">The bytes that should be sent to the connected remote endpoint.</param>
            <param name="timeout">
            The timeout after which to cancel the transmission attempt. This timeout is reused by both the 'send' and
            'receive' parts of the transmission attempt, such that the maximum timeout is equal to 2 times the given
            value.
            </param>
            <returns>The byte buffer received as a response to the sent buffer.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IClient.SendComplexAsync``2(``0,System.TimeSpan)">
            <summary>
            Sends the given request and listens for a response of the given type asynchronously. Does not block.
            Cancels the operation if the given timeout is exceeded
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <typeparam name="Rep">The type of response packet to receive.</typeparam>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
            <returns>The received instance.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IClient.SendSimpleAsync``1(``0,System.TimeSpan)">
            <summary>
            Sends the given request asynchronously without listening for a response, not blocking until it is sent.
            Cancels the operation if the given timeout is exceeded.
            </summary>
            <typeparam name="Req">The type of request packet to send.</typeparam>
            <param name="request">The request packet to send.</param>
            <param name="timeout">The timeout for which to wait for the operation to complete.</param>
            <returns>Whether the transmission attempt was successful.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IClient.TryBindAsync(System.Net.IPAddress,System.Nullable{System.Int32},System.TimeSpan)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local address and port. Does not block.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localAddress">The local IP address to bind to. Null if any IP address will suffice.</param>
            <param name="localPort">The local port to bind to. Null if any port will suffice.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IClient.TryConnectAsync(System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <summary>
            Attempts to connect asynchronously to the remote <see cref="T:NetSharp.Server"/> at the given <see cref="T:System.Net.IPAddress"/>
            and over the given port. If the timeout is exceeded the connection attempt is aborted and the method returns false.
            </summary>
            <param name="remoteAddress">The remote IP address to connect to.</param>
            <param name="remotePort">The remote port to connect over.</param>
            <param name="timeout">The timeout within which to attempt the connection.</param>
            <returns>Whether the connection was successful or not.</returns>
        </member>
        <member name="T:NetSharp.Interfaces.INetworkSerialisable">
            <summary>
            Describes an object that can be serialised to be sent across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.INetworkSerialisable.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialises the object instance from a byte array.
            </summary>
            <param name="serialisedObject">The memory containing the serialised object instance.</param>
        </member>
        <member name="M:NetSharp.Interfaces.INetworkSerialisable.Serialise">
            <summary>
            Serialises the object instance into a byte array.
            </summary>
            <returns>The memory containing the serialised object instance.</returns>
        </member>
        <member name="T:NetSharp.Interfaces.IPacket">
            <summary>
            Describes the methods and properties that every packet
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IPacket.AfterDeserialisation">
            <summary>
            Allows for custom fields to be converted from their serialised format, after being received from the network.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IPacket.BeforeSerialisation">
            <summary>
            Allows for custom fields to be converted into another format prior to being sent via the network.
            </summary>
        </member>
        <member name="T:NetSharp.Interfaces.IRequestPacket">
            <summary>
            Describes a request packet.
            </summary>
        </member>
        <member name="T:NetSharp.Interfaces.IResponsePacket`1">
            <summary>
            Describes a response packet to a request packet.
            </summary>
            <typeparam name="TReq">The request packet that this type is a response to.</typeparam>
        </member>
        <member name="P:NetSharp.Interfaces.IResponsePacket`1.RequestPacket">
            <summary>
            The request packet that was handled with this response packet.
            </summary>
        </member>
        <member name="T:NetSharp.Interfaces.IServer">
            <summary>
            Describes a server capable of asynchronously handling multiple <see cref="T:NetSharp.Interfaces.IClient"/> connections at once.
            </summary>
        </member>
        <member name="E:NetSharp.Interfaces.IServer.ClientConnected">
            <summary>
            Signifies that a connection with a remote endpoint has been made.
            </summary>
        </member>
        <member name="E:NetSharp.Interfaces.IServer.ClientDisconnected">
            <summary>
            Signifies that a connection with a remote endpoint has been lost.
            </summary>
        </member>
        <member name="E:NetSharp.Interfaces.IServer.ServerStarted">
            <summary>
            Signifies that the server was started and clients will start being accepted.
            </summary>
        </member>
        <member name="E:NetSharp.Interfaces.IServer.ServerStopped">
            <summary>
            Signifies that the server was stopped and clients will stop being accepted.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IServer.RunAsync(System.Net.EndPoint)">
            <summary>
            Starts the server asynchronously and starts accepting client connections. Does not block.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
        </member>
        <member name="M:NetSharp.Interfaces.IServer.Shutdown">
            <summary>
            Shuts down the server.
            </summary>
        </member>
        <member name="M:NetSharp.Interfaces.IServer.TryDeregisterComplexPacketHandler``2(NetSharp.ComplexPacketHandler{``0,``1}@)">
            <summary>
            Attempts to deregister the complex packet handler delegate for all packets of the given type. If a handler
            method doesn't exist for the given packet type, <paramref name="oldHandlerDelegate"/> will be <c>default</c>.
            </summary>
            <typeparam name="Req">The type of request packet for which to deregister the handler delegate.</typeparam>
            <typeparam name="Rep">The type of response packet that is generated by the delegate method.</typeparam>
            <param name="oldHandlerDelegate">The old handler delegate method that was previously registered.</param>
            <returns>Whether the packet handler delegate was successfully deregistered.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IServer.TryDeregisterSimplePacketHandler``1(NetSharp.SimplePacketHandler{``0}@)">
            <summary>
            Attempts to deregister the simple packet handler delegate for all packets of the given type. If a handler
            method doesn't exist for the given packet type, <paramref name="oldHandlerDelegate"/> will be <c>default</c>.
            </summary>
            <typeparam name="Req">The type of request packet for which to deregister the handler delegate.</typeparam>
            <param name="oldHandlerDelegate">The old handler delegate method that was previously registered.</param>
            <returns>Whether the packet handler delegate was successfully deregistered.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IServer.TryRegisterComplexPacketHandler``2(NetSharp.ComplexPacketHandler{``0,``1})">
            <summary>
            Attempts to register a complex packet handler delegate for all packets of the given type. If a handler
            method already exists for the given packet type, it will be updated and replaced with the given one.
            </summary>
            <typeparam name="Req">The type of request packet for which to register the handler delegate.</typeparam>
            <typeparam name="Rep">The type of response packet that is generated by the delegate method.</typeparam>
            <param name="handlerDelegate">The delegate method to register as the complex packet handler.</param>
            <returns>Whether the packet handler delegate was successfully registered.</returns>
        </member>
        <member name="M:NetSharp.Interfaces.IServer.TryRegisterSimplePacketHandler``1(NetSharp.SimplePacketHandler{``0})">
            <summary>
            Attempts to register a simple packet handler delegate for all packets of the given type. If a handler
            method already exists for the given packet type, it will be updated and replaced with the given one.
            </summary>
            <typeparam name="Req">The type of request packet for which to register the handler delegate.</typeparam>
            <param name="handlerDelegate">The delegate method to register as the simple packet handler.</param>
            <returns>Whether the packet handler delegate was successfully registered.</returns>
        </member>
        <member name="T:NetSharp.Logging.LogLevel">
            <summary>
            Specifies the severity level of a log message.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Info">
            <summary>
            The logged message contains some information. Lowest severity.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Warn">
            <summary>
            The logged message contains a warning. Higher severity.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Error">
            <summary>
            The logged message contains details about an error. Higher severity.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.LogLevel.Exception">
            <summary>
            The logged message contains details about an exception. Highest severity.
            </summary>
        </member>
        <member name="T:NetSharp.Logging.Logger">
            <summary>
            A simple logger capable of writing text to a stream.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.Logger.loggingStream">
            <summary>
            The stream to which messages will be logged.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.Logger.writer">
            <summary>
            The text writer we will use to log messages to the underlying stream.
            </summary>
        </member>
        <member name="F:NetSharp.Logging.Logger.minimumSeverity">
            <summary>
            The minimum severity that log messages need to be logged to the underlying stream.
            </summary>
        </member>
        <member name="M:NetSharp.Logging.Logger.#ctor(System.IO.Stream)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Logging.Logger"/> struct.
            </summary>
            <param name="streamToLogTo">The stream that the logger instance should log messages to.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Logging.Logger.Log(System.String,System.Exception,NetSharp.Logging.LogLevel)">
            <summary>
            Logs a message to the underlying stream, along with the given exception and at the given severity.
            </summary>
            <param name="message">The message that should be logged.</param>
            <param name="exception">The exception that occurred (if any).</param>
            <param name="severity">The severity of the message that is being logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogAsync(System.String,System.Exception,NetSharp.Logging.LogLevel)">
            <summary>
            Logs a message asynchronously to the underlying stream, along with the given exception and at the given severity.
            </summary>
            <param name="message">The message that should be logged.</param>
            <param name="exception">The exception that occurred (if any).</param>
            <param name="severity">The severity of the message that is being logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogError(System.String)">
            <summary>
            Logs an error to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The error that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogErrorAsync(System.String)">
            <summary>
            Logs an error to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Error"/>.
            </summary>
            <param name="message">The error that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogException(System.Exception)">
            <summary>
            Logs an exception to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogException(System.String,System.Exception)">
            <summary>
            Logs an exception to the underlying stream, along with a short debug message, with severity
            <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="message">The debug message that should be logged with the exception.</param>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogExceptionAsync(System.Exception)">
            <summary>
            Logs an exception to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogExceptionAsync(System.String,System.Exception)">
            <summary>
            Logs an exception to the underlying stream asynchronously, along with a short debug message, with severity
            <see cref="F:NetSharp.Logging.LogLevel.Exception"/>.
            </summary>
            <param name="message">The debug message that should be logged with the exception.</param>
            <param name="exception">The exception that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogMessage(System.String)">
            <summary>
            Logs a message to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The message that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogMessageAsync(System.String)">
            <summary>
            Logs a message to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The message that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogWarning(System.String)">
            <summary>
            Logs a warning to the underlying stream, with severity <see cref="F:NetSharp.Logging.LogLevel.Info"/>.
            </summary>
            <param name="message">The warning that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.LogWarningAsync(System.String)">
            <summary>
            Logs a warning to the underlying stream asynchronously, with severity <see cref="F:NetSharp.Logging.LogLevel.Warn"/>.
            </summary>
            <param name="message">The warning that should be logged.</param>
        </member>
        <member name="M:NetSharp.Logging.Logger.SetMinimumLogSeverity(NetSharp.Logging.LogLevel)">
            <summary>
            Sets the minimum severity level that new messages need to be logged to the underlying stream.
            </summary>
            <param name="minimumSeverityLevel">The new minimum severity level.</param>
        </member>
        <member name="T:NetSharp.Packets.Builtin.ConnectPacket">
            <summary>
            A simple connection request packet for the UDP protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.ConnectResponsePacket">
            <summary>
            A response packet for the <see cref="T:NetSharp.Packets.Builtin.ConnectPacket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Packets.Builtin.ConnectResponsePacket.RequestPacket">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.ConnectResponsePacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.DataPacket">
            <summary>
            A simple data transfer packet, that allows for the transmission of an arbitrary number of frames.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Builtin.DataPacket.RequestBuffer">
            <summary>
            The data that should be transferred across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataPacket"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataPacket"/> class.
            </summary>
            <param name="buffer">The data that this request packet should contain.</param>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.DataResponsePacket">
            <summary>
            A response packet for the <see cref="T:NetSharp.Packets.Builtin.DataPacket"/>.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Builtin.DataResponsePacket.ResponseBuffer">
            <summary>
            The data that should be transferred across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataResponsePacket"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.DataResponsePacket"/> class.
            </summary>
            <param name="buffer">The data that this response packet should contain.</param>
        </member>
        <member name="P:NetSharp.Packets.Builtin.DataResponsePacket.RequestPacket">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DataResponsePacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.DisconnectPacket">
            <summary>
            A simple disconnect packet for the UDP protocol.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.DisconnectPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.PingPacket">
            <summary>
            A simple ping request packet for heartbeat monitoring and RTT measurement.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.PingResponsePacket">
            <summary>
            A response packet for the <see cref="T:NetSharp.Packets.Builtin.PingPacket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Packets.Builtin.PingResponsePacket.RequestPacket">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.PingResponsePacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.Builtin.SimpleDataPacket">
            <summary>
            A simple one-time-use data transfer packet, that allows for the transmission of an arbitrary number of frames.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Builtin.SimpleDataPacket.RequestBuffer">
            <summary>
            The data that should be transferred across the network.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.SimpleDataPacket"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Builtin.SimpleDataPacket"/> class.
            </summary>
            <param name="buffer">The data that this request packet should contain.</param>
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.AfterDeserialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.BeforeSerialisation">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.Deserialise(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Packets.Builtin.SimpleDataPacket.Serialise">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Packets.NetworkErrorCode">
            <summary>
            Enumerates the possible error codes for network operations, being held in the packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkErrorCode.Ok">
            <summary>
            Signifies that there was no error during transmission.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.NetworkErrorCode.Error">
            <summary>
            A generic error occurred during packet transmission.
            </summary>
        </member>
        <member name="T:NetSharp.Packets.Packet">
            <summary>
            Represents a packet that is transmitted over the network.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Packet.HeaderSize">
            <summary>
            The size of the packet header in bytes.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Packet.Buffer">
            <summary>
            The data held in this packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Packet.Count">
            <summary>
            The size of the packet's data.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Packet.ErrorCode">
            <summary>
            The error code for this packet.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.Packet.Type">
            <summary>
            The packet type.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.Packet.#ctor(System.ReadOnlyMemory{System.Byte},System.UInt32,NetSharp.Packets.NetworkErrorCode)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.Packet"/> struct.
            </summary>
            <param name="data">The data that should be transmitted in the packet.</param>
            <param name="type">The packet type.</param>
            <param name="errorCode">The error code associated with this transmission.</param>
        </member>
        <member name="P:NetSharp.Packets.Packet.TotalSize">
            <summary>
            Returns the total size of the serialised packet (including the header) in bytes.
            </summary>
            <returns>The total size of the serialised packet (including the header) in bytes.</returns>
        </member>
        <member name="M:NetSharp.Packets.Packet.Deserialise(System.Memory{System.Byte})">
            <summary>
            Deserialises the given buffer into a packet instance.
            </summary>
            <param name="buffer">The byte buffer to serialise.</param>
            <returns>The deserialised packet instance.</returns>
        </member>
        <member name="M:NetSharp.Packets.Packet.Serialise(NetSharp.Packets.Packet)">
            <summary>
            Serialises the given packet instance into a single byte buffer.
            </summary>
            <param name="instance">The packet instance to serialise.</param>
            <returns>The byte buffer that represents the packet instance.</returns>
        </member>
        <member name="T:NetSharp.Packets.PacketRegistry">
            <summary>
            Provides method of registering request packets and their relevant response packets, as well as mapping their ids.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.AutomaticPacketTypeIdStartPoint">
            <summary>
            The start id for automatically generated packet type ids. Any custom packet type ids lower than this value
            that come from external assemblies will be incremented by this value, to ensure that there are no clashes.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.currentAutomaticPacketTypeIdCounterLockObject">
            <summary>
            The lock object for synchronising access to the <see cref="F:NetSharp.Packets.PacketRegistry.currentAutomaticPacketTypeIdCounter"/> field.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.idToPacketTypeMap">
            <summary>
            Maps a packet type id to its relevant packet type, and vice-versa.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.LibraryAssembly">
            <summary>
            The assembly that represents the library, where all of the builtin packets are defined.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.requestToResponseMap">
            <summary>
            Maps a request packet to its relevant response packet, and vice-versa.
            </summary>
        </member>
        <member name="F:NetSharp.Packets.PacketRegistry.currentAutomaticPacketTypeIdCounter">
            <summary>
            The current id for registered packets.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.#cctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.PacketRegistry"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetNewPacketTypeId(System.Type)">
            <summary>
            Fetches the packet type id of the given packet type. If the packet type is declared outside of the library
            assembly, then its value is incremented by the <see cref="F:NetSharp.Packets.PacketRegistry.AutomaticPacketTypeIdStartPoint"/> value. This ensure that
            there are no clashes between the packet type ids of packets declared in the library and external packets.
            </summary>
            <param name="packetType">The packet type whose id should be fetched.</param>
            <returns>The id of the given packet type.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.DeregisterPacketType(System.Type,System.Type)">
            <summary>
            Deregisters the given packet type from the registry.
            </summary>
            <param name="requestPacketType">The request packet type to deregister, if it is registered.</param>
            <param name="responsePacketType">The response packet associated with the request packet.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.DeregisterPacketTypes(System.Collections.Generic.Dictionary{System.Type,System.Type})">
            <summary>
            Deregisters the given packet types from the registry.
            </summary>
            <param name="requestToResponsePacketTypeMap">The list of packet types to deregister, if they are registered.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetPacketId(System.Type)">
            <summary>
            Returns the packet type id associated with the given packet type.
            </summary>
            <param name="packetType">The packet type whose id to fetch.</param>
            <returns>The id of the packet type given.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetPacketId``1">
            <summary>
            Returns the packet type id associated with the given packet type.
            </summary>
            <typeparam name="TPacket">The packet type whose id to fetch.</typeparam>
            <returns>The id of the packet type given.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetPacketType(System.UInt32)">
            <summary>
            Returns the packet type associated with the given id.
            </summary>
            <param name="packetTypeId">The packet id whose mapped type to fetch.</param>
            <returns>The packet type mapped by the given id.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetRequestPacketType``1">
            <summary>
            Returns the type of request packet mapped by the given response packet type.
            </summary>
            <typeparam name="TResponse">The response packet type whose request packet type to fetch.</typeparam>
            <returns>The request packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetRequestPacketType(System.Type)">
            <summary>
            Returns the type of request packet mapped by the given response packet type.
            </summary>
            <param name="responsePacketType">The response packet type whose request packet type to fetch.</param>
            <returns>The request packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetResponsePacketType``1">
            <summary>
            Returns the type of response packet mapped by the given request packet type.
            </summary>
            <typeparam name="TRequest">The request packet type whose response packet type to fetch.</typeparam>
            <returns>The response packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.GetResponsePacketType(System.Type)">
            <summary>
            Returns the type of response packet mapped by the given request packet type.
            </summary>
            <param name="requestPacketType">The request packet type whose response packet type to fetch.</param>
            <returns>The response packet type, <c>null</c> if no type is mapped.</returns>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketSourceAssemblies(System.Reflection.Assembly[])">
            <summary>
            Rebuilds the packet registry, by registering every <see cref="T:NetSharp.Interfaces.IPacket"/> inheritor in the given assemblies.
            </summary>
            <param name="packetSourceAssemblies">
            The assemblies from which the packet types to register are sourced.
            </param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketSourceAssembly(System.Reflection.Assembly)">
            <summary>
            Registers all the <see cref="T:NetSharp.Interfaces.IPacket"/> implementors in the given assembly.
            </summary>
            <param name="packetSourceAssembly">The assembly whose packet types to register.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketType(System.Type,System.Type)">
            <summary>
            Registers the given packet type to the registry.
            </summary>
            <param name="requestPacketType">The request packet type to register, if it is not registered.</param>
            <param name="responsePacketType">The response packet associated with the request packet.</param>
        </member>
        <member name="M:NetSharp.Packets.PacketRegistry.RegisterPacketTypes(System.Collections.Generic.Dictionary{System.Type,System.Type})">
            <summary>
            Registers the given packet types to the registry.
            </summary>
            <param name="requestToResponsePacketTypeMap">
            The dictionary mapping the request packet types to register, to their relevant response packet types.
            The response packet type can be null; then the request packet type is treated as a 'simple' packet.
            </param>
        </member>
        <member name="T:NetSharp.Packets.PacketTypeIdAttribute">
            <summary>
            Allows the placing of a custom packet type on a class or struct. This is used if the class or struct
            inherits from <see cref="T:NetSharp.Interfaces.IRequestPacket"/> or <see cref="T:NetSharp.Interfaces.IResponsePacket`1"/>.
            </summary>
        </member>
        <member name="M:NetSharp.Packets.PacketTypeIdAttribute.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Packets.PacketTypeIdAttribute"/> attribute.
            </summary>
            <param name="type">The custom type id that the decorated packet type should have.</param>
        </member>
        <member name="P:NetSharp.Packets.PacketTypeIdAttribute.Id">
            <summary>
            The custom type id that the decorated packet type should have. This overrides the automatically generated id.
            </summary>
        </member>
        <member name="T:NetSharp.ComplexPacketHandler`2">
            <summary>
            Represents a method that receives a request packet of the given type (<typeparamref name="TReq"/>) and
            handles the request, returning a response packet of the given type (<typeparamref name="TRep"/>).
            </summary>
            <typeparam name="TReq">The type of request packet handled by this delegate method.</typeparam>
            <typeparam name="TRep">The type of response packet returned by this delegate method.</typeparam>
            <param name="requestPacket">The request packet that should be handled by this delegate method.</param>
            <param name="remoteEndPoint">The remote endpoint from which the request originated.</param>
            <returns>The response packet to send back to the remote endpoint from which the request originated.</returns>
        </member>
        <member name="T:NetSharp.SimplePacketHandler`1">
            <summary>
            Represents a method that receives a simple request packet of the given type (<typeparamref name="TReq"/>) and
            handles the request, not returning any response packets.
            </summary>
            <typeparam name="TReq">The type of request packet handled by this delegate method.</typeparam>
            <param name="requestPacket">The request packet that should be handled by this delegate method.</param>
            <param name="remoteEndPoint">The remote endpoint from which the request originated.</param>
        </member>
        <member name="T:NetSharp.Server">
            <summary>
            Provides methods for handling connected <see cref="T:NetSharp.Interfaces.IClient"/> instances.
            </summary>
        </member>
        <member name="F:NetSharp.Server.bindSocketCancellationTokenSource">
            <summary>
            Cancellation token source for the <see cref="M:NetSharp.Server.TryBindAsync(System.Net.IPAddress,System.Int32)"/> method.
            </summary>
        </member>
        <member name="F:NetSharp.Server.complexPacketHandlers">
            <summary>
            Maps a packet type id to the complex packet handler for that packet type.
            </summary>
        </member>
        <member name="F:NetSharp.Server.requestPacketDeserialisers">
            <summary>
            Maps a packet type id to the raw packet deserialiser that deserialises raw packets to
            <see cref="T:NetSharp.Interfaces.IRequestPacket"/> implementors.
            </summary>
        </member>
        <member name="F:NetSharp.Server.simplePacketHandlers">
            <summary>
            Maps a packet type id to the simple packet handler for that packet type.
            </summary>
        </member>
        <member name="F:NetSharp.Server.PendingConnectionBacklog">
            <summary>
            The maximum number of connections that are allowed in the connection backlog.
            </summary>
        </member>
        <member name="F:NetSharp.Server.DefaultNetworkOperationTimeout">
            <summary>
            The default timeout value for all network operations.
            </summary>
        </member>
        <member name="F:NetSharp.Server.serverShutdownCancellationTokenSource">
            <summary>
            Cancellation token source to stop handling client sockets when the server should be shut down.
            </summary>
        </member>
        <member name="F:NetSharp.Server.socket">
            <summary>
            The <see cref="T:System.Net.Sockets.Socket"/> underlying the connection.
            </summary>
        </member>
        <member name="F:NetSharp.Server.socketOptions">
            <summary>
            Backing field for the <see cref="P:NetSharp.Server.SocketOptions"/> property.
            </summary>
        </member>
        <member name="F:NetSharp.Server.runServer">
            <summary>
            Whether the server should be ran.
            </summary>
        </member>
        <member name="M:NetSharp.Server.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Server"/> class.
            </summary>
        </member>
        <member name="M:NetSharp.Server.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,NetSharp.Utils.Socket_Options.SocketOptionManager)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Server"/> class.
            </summary>
            <param name="socketType">The socket type for the underlying socket.</param>
            <param name="protocolType">The protocol type for the underlying socket.</param>
            <param name="socketManager">The <see cref="T:NetSharp.Utils.Socket_Options.SocketOptions"/> manager to use.</param>
        </member>
        <member name="M:NetSharp.Server.Finalize">
            <summary>
            Destroys an instance of the <see cref="T:NetSharp.Server"/> class.
            </summary>
        </member>
        <member name="T:NetSharp.Server.RawRequestPacketDeserialiser">
            <summary>
            Represents a method that receives a raw packet, and deserialises it into an <see cref="T:NetSharp.Interfaces.IRequestPacket"/> implementor.
            </summary>
            <param name="rawPacket">The raw packet that was received from the network.</param>
            <returns>The deserialised instance of the packet.</returns>
        </member>
        <member name="E:NetSharp.Server.ClientConnected">
            <summary>
            Signifies that a connection with a remote endpoint has been made.
            </summary>
        </member>
        <member name="E:NetSharp.Server.ClientDisconnected">
            <summary>
            Signifies that a connection with a remote endpoint has been lost.
            </summary>
        </member>
        <member name="E:NetSharp.Server.ServerStarted">
            <summary>
            Signifies that the server was started and clients will start being accepted.
            </summary>
        </member>
        <member name="E:NetSharp.Server.ServerStopped">
            <summary>
            Signifies that the server was stopped and clients will stop being accepted.
            </summary>
        </member>
        <member name="P:NetSharp.Server.SocketOptions">
            <summary>
            The configured socket options for the underlying connection.
            </summary>
        </member>
        <member name="M:NetSharp.Server.RegisterInternalPacketHandlers">
            <summary>
            Registers packet handlers for every internal library packet.
            </summary>
        </member>
        <member name="M:NetSharp.Server.DeserialiseRequestPacket(System.UInt32,NetSharp.Packets.Packet@)">
            <summary>
            Deserialises the given <see cref="T:NetSharp.Packets.Packet"/> struct into an <see cref="T:NetSharp.Interfaces.IRequestPacket"/> implementor.
            </summary>
            <param name="packetType">The type id of packet that we should deserialise to.</param>
            <param name="rawRequestPacket">The packet that should be deserialised.</param>
            <returns>The deserialised packet instance, cast to the <see cref="T:NetSharp.Interfaces.IRequestPacket"/> interface.</returns>
        </member>
        <member name="M:NetSharp.Server.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:NetSharp.Server"/> instance.
            </summary>
            <param name="disposing">Whether this instance is being disposed.</param>
        </member>
        <member name="M:NetSharp.Server.DoHandleClientAsync(System.Object)">
            <summary>
            Provides a task that represents the handling of a client.
            </summary>
            <param name="clientHandlerArgsObj">The object representing the passed <see cref="T:NetSharp.Server.ClientHandlerArgs"/> instance.</param>
        </member>
        <member name="M:NetSharp.Server.HandleClientAsync(NetSharp.Server.ClientHandlerArgs)">
            <summary>
            Handles a new client asynchronously.
            </summary>
            <param name="args">The client handler arguments that should be passed to the client handler.</param>
        </member>
        <member name="M:NetSharp.Server.HandleRequestPacket(System.UInt32,NetSharp.Interfaces.IRequestPacket@,System.Net.EndPoint@)">
            <summary>
            Handles the given request packet with a registered packet handler. In this case, a complex packet handler
            will override any registered simple packet handlers.
            </summary>
            <param name="packetType">The type id of the packet that we should handle.</param>
            <param name="requestPacket">The packet instance that should be handled.</param>
            <param name="remoteEndPoint">The remote endpoint from which the request packet originated.</param>
            <returns>The response packet that should be sent back to the remote endpoint.</returns>
        </member>
        <member name="M:NetSharp.Server.OnClientConnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Server.ClientConnected"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint with which a connection was made.</param>
        </member>
        <member name="M:NetSharp.Server.OnClientDisconnected(System.Net.EndPoint)">
            <summary>
            Invokes the <see cref="E:NetSharp.Server.ClientDisconnected"/> event.
            </summary>
            <param name="remoteEndPoint">The remote endpoint with which a connection was lost.</param>
        </member>
        <member name="M:NetSharp.Server.OnServerStarted">
            <summary>
            Invokes the <see cref="E:NetSharp.Server.ServerStarted"/> event.
            </summary>
        </member>
        <member name="M:NetSharp.Server.OnServerStopped">
            <summary>
            Invokes the <see cref="E:NetSharp.Server.ServerStopped"/> event.
            </summary>
        </member>
        <member name="M:NetSharp.Server.TryBind(System.Net.IPAddress,System.Int32)">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local address and port. Blocks. Does not timeout.
            </summary>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Server.TryBind(System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <summary>
            Attempts to synchronously bind the underlying socket to the given local address and port. Blocks.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Server.TryBindAsync(System.Net.IPAddress,System.Int32)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local address and port. Does not block.
            Does not timeout.
            </summary>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Server.TryBindAsync(System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local address and port. Does not block.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localAddress">The local IP address to bind to.</param>
            <param name="localPort">The local port to bind to.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Server.TryBindAsync(System.Net.EndPoint)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local endpoint. Does not block.
            Does not timeout.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Server.TryBindAsync(System.Net.EndPoint,System.TimeSpan)">
            <summary>
            Attempts to asynchronously bind the underlying socket to the given local endpoint. Does not block.
            If the timeout is exceeded the binding attempt is aborted and the method returns false.
            </summary>
            <param name="localEndPoint">The local endpoint to bind to.</param>
            <param name="timeout">The timeout within which to attempt the binding.</param>
            <returns>Whether the binding was successful or not.</returns>
        </member>
        <member name="M:NetSharp.Server.RunAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Server.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Server.TryDeregisterComplexPacketHandler``2(NetSharp.ComplexPacketHandler{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Server.TryDeregisterSimplePacketHandler``1(NetSharp.SimplePacketHandler{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Server.TryRegisterComplexPacketHandler``2(NetSharp.ComplexPacketHandler{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Server.TryRegisterSimplePacketHandler``1(NetSharp.SimplePacketHandler{``0})">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Server.ClientHandlerArgs">
            <summary>
            Holds information about the arguments passed to every client handler task.
            </summary>
        </member>
        <member name="F:NetSharp.Server.ClientHandlerArgs.ClientEndPoint">
            <summary>
            The remote endpoint for the client being handled.
            </summary>
        </member>
        <member name="F:NetSharp.Server.ClientHandlerArgs.ClientSocket">
            <summary>
            The client handler socket for the client being handled. Is only set if using TCP.
            </summary>
        </member>
        <member name="M:NetSharp.Server.ClientHandlerArgs.#ctor(System.Net.EndPoint,System.Net.Sockets.Socket)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Server.ClientHandlerArgs"/> struct.
            </summary>
            <param name="remoteEndPoint">The remote endpoint of the client that should be handled.</param>
            <param name="handlerSocket">The handler socket of the client that should be handled.</param>
        </member>
        <member name="M:NetSharp.Server.ClientHandlerArgs.ForTcpClientHandler(System.Net.Sockets.Socket@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Server.ClientHandlerArgs"/> for a TCP client.
            </summary>
            <returns>A new instance of the <see cref="T:NetSharp.Server.ClientHandlerArgs"/>, setup for a TCP client.</returns>
        </member>
        <member name="M:NetSharp.Server.ClientHandlerArgs.ForUdpClientHandler(System.Net.EndPoint@)">
            <summary>
            Constructs a new instance of the <see cref="T:NetSharp.Server.ClientHandlerArgs"/> for a UDP client.
            </summary>
            <returns>A new instance of the <see cref="T:NetSharp.Server.ClientHandlerArgs"/>, setup for a UDP client.</returns>
        </member>
        <member name="T:NetSharp.Servers.TcpServer">
            <summary>
            Provides methods for TCP communication with connected <see cref="T:NetSharp.Clients.TcpClient"/> instances.
            </summary>
        </member>
        <member name="M:NetSharp.Servers.TcpServer.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Servers.TcpServer.HandleClientAsync(NetSharp.Server.ClientHandlerArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Servers.TcpServer.RunAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Servers.UdpServer">
            <summary>
            Provides methods for UDP communication with connected <see cref="T:NetSharp.Clients.UdpClient"/> instances.
            </summary>
        </member>
        <member name="F:NetSharp.Servers.UdpServer.activeClients">
            <summary>
            Holds currently connected and active clients, as well as their current received packet queues.
            </summary>
        </member>
        <member name="F:NetSharp.Servers.UdpServer.clientChannelOptions">
            <summary>
            The options that should be applied to every channel created to handle a client.
            </summary>
        </member>
        <member name="M:NetSharp.Servers.UdpServer.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Servers.UdpServer.HandleClientAsync(NetSharp.Server.ClientHandlerArgs)">
            <inheritdoc />
        </member>
        <member name="M:NetSharp.Servers.UdpServer.RunAsync(System.Net.EndPoint)">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Utils.BiDictionary`2">
            <summary>
            Represents a concurrent two-way dictionary, that can be indexed by either a key or a value.
            </summary>
            <typeparam name="K">The type of key that will be stored.</typeparam>
            <typeparam name="V">The type of value that will be stored.</typeparam>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.keyToValueMap">
            <summary>
            Maps keys to their corresponding values.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap">
            <summary>
            Maps values to their corresponding keys.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.BiDictionary`2"/> class.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`1)">
            <summary>
            Indexes this instance with the given value.
            </summary>
            <param name="index">The value whose key to get or set.</param>
            <returns>The fetched key.</returns>
        </member>
        <member name="P:NetSharp.Utils.BiDictionary`2.Item(`0)">
            <summary>
            Indexes this instance with the given key.
            </summary>
            <param name="index">The key whose value to get or set.</param>
            <returns>The fetched value.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.Clear">
            <summary>
            Clears this instance's <see cref="F:NetSharp.Utils.BiDictionary`2.keyToValueMap"/> and <see cref="F:NetSharp.Utils.BiDictionary`2.valueToKeyMap"/>.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsKey(`0@)">
            <summary>
            Whether this instance contains the given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Whether the given key was found.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.ContainsValue(`1@)">
            <summary>
            Whether this instance contains the given value.
            </summary>
            <param name="value">The value to check.</param>
            <returns>Whether the given value was found.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateKey(`1,`0)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">The value whose key to set.</param>
            <param name="key">The new value for the value's associated key.</param>
            <returns>Whether the new key was correctly set.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.SetOrUpdateValue(`0,`1)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="value">The new value for the  key's associated value.</param>
            <returns>Whether the new value was correctly set.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearKey(`1@,`0@)">
            <summary>
            Attempts to remove the key associated with the given value.
            </summary>
            <param name="value">The value whose key to remove.</param>
            <param name="key">The old key value.</param>
            <returns>Whether the given value had a valid key associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryClearValue(`0@,`1@)">
            <summary>
            Attempts to remove the value associated with the given key.
            </summary>
            <param name="key">The key whose value to remove.</param>
            <param name="value">The old value.</param>
            <returns>Whether the given key had a valid valid associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetKey(`1@,`0@)">
            <summary>
            Attempts to get the key associated with the given value.
            </summary>
            <param name="value">The value whose key to get.</param>
            <param name="key">The returned key.</param>
            <returns>Whether the given value has a valid key associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            Attempts to get the value associated with the given key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The returned value.</param>
            <returns>Whether the given key as a valid value associated with it.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetKey(`1@,`0@)">
            <summary>
            Attempts to set the key associated with the given value.
            </summary>
            <param name="value">The value whose key to set.</param>
            <param name="key">The key which should be set for the given value.</param>
            <returns>Whether the given value was successfully set.</returns>
        </member>
        <member name="M:NetSharp.Utils.BiDictionary`2.TrySetValue(`0@,`1@)">
            <summary>
            Attempts to set the value associated with the given key.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="value">The value which should be set for the given key.</param>
            <returns>Whether the given key was successfully set.</returns>
        </member>
        <member name="T:NetSharp.Utils.Constants">
            <summary>
            Holds internal default configurations and constants.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.Constants.DefaultPort">
            <summary>
            The default port over which a connection is made.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.Constants.UdpMaxBufferSize">
            <summary>
            The largest byte buffer that can be sent via UDP.
            </summary>
        </member>
        <member name="T:NetSharp.Utils.Conversion.EndianAwareBitConverter">
            <summary>
            Wraps the <see cref="T:System.BitConverter"/> class to provide conversion that is endian-aware.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ReverseAsNeeded(System.Span{System.Byte},System.Boolean)">
            <summary>
            Reverses the given bytes if the endian-nes doesn't match.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Boolean)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Char,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Char)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Double,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Double)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Single,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Single)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int32)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int64)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.Int16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.Int16)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt32,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt32)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt64,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt64)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.GetBytes(System.UInt16,System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.GetBytes(System.UInt16)"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToBoolean(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToChar(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToDouble(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt16(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToSingle(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt16(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt32(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:NetSharp.Utils.Conversion.EndianAwareBitConverter.ToUInt64(System.Span{System.Byte},System.Boolean)">
            <inheritdoc cref="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="T:NetSharp.Utils.NetworkOperations">
            <summary>
            Helper class for asynchronously performing common network operations, for both the UDP and TCP protocols.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.ReadAsync(System.Net.Sockets.Socket,System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Reads the specified amount of data asynchronously from the network, via the given socket.
            The given <see cref="T:System.Net.Sockets.SocketFlags"/> are associated with the read, and the given <see cref="T:System.Threading.CancellationToken"/>
            is used to allow for asynchronous task cancellation.
            </summary>
            <param name="socket">The socket which should read data from the network.</param>
            <param name="count">The number of bytes to read from the network.</param>
            <param name="socketFlags">The socket flags associated with the receive operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
            <returns>The result of the receive operation.</returns>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.ReadFromAsync(System.Net.Sockets.Socket,System.Int32,System.Net.EndPoint,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Reads a datagram asynchronously from the given remote endpoint, via the given socket.
            The given <see cref="T:System.Net.Sockets.SocketFlags"/> are associated with the read, and the given <see cref="T:System.Threading.CancellationToken"/>
            is used to allow for asynchronous task cancellation.
            </summary>
            <param name="socket">The socket which should read data from the network.</param>
            <param name="count">The number of bytes to read from the network.</param>
            <param name="remoteEndPoint">The remote endpoint from which data should be read.</param>
            <param name="socketFlags">The socket flags associated with the receive operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
            <returns>The result of the receive operation.</returns>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.ReadPacketAsync(System.Net.Sockets.Socket,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Reads a packet asynchronously from network, via the given socket. The given <see cref="T:System.Net.Sockets.SocketFlags"/> are
            associated with the read, and the given <see cref="T:System.Threading.CancellationToken"/> is used to allow for asynchronous
            task cancellation.
            </summary>
            <param name="socket">The socket which should read the packet from the network.</param>
            <param name="socketFlags">The socket flags associated with the receive operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
            <returns>The read packet.</returns>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.ReadPacketFromAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Reads a packet asynchronously from the given remote endpoint, via the given socket. The given
            <see cref="T:System.Net.Sockets.SocketFlags"/> are associated with the read, and the given <see cref="T:System.Threading.CancellationToken"/> is
            used to allow for asynchronous task cancellation.
            </summary>
            <param name="socket">The socket which should read the packet from the network.</param>
            <param name="remoteEndPoint">The remote endpoint from which a packet should be read.</param>
            <param name="socketFlags">The socket flags associated with the receive operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
            <returns>The read packet and associated transmission results.</returns>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.WriteAsync(System.Net.Sockets.Socket,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Writes the given buffer asynchronously to the network, via the given socket.
            The given <see cref="T:System.Net.Sockets.SocketFlags"/> are associated with the write, and the given <see cref="T:System.Threading.CancellationToken"/>
            is used to allow for asynchronous task cancellation.
            </summary>
            <param name="socket">The socket which should write data to the network.</param>
            <param name="buffer">The buffer that should be written to the network.</param>
            <param name="socketFlags">The socket flags associated with the send operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.WritePacketAsync(System.Net.Sockets.Socket,NetSharp.Packets.Packet,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Writes the given packet asynchronously to the network, via the given socket. The given <see cref="T:System.Net.Sockets.SocketFlags"/>
            are associated with the write, and the given <see cref="T:System.Threading.CancellationToken"/> is used to allow for asynchronous
            task cancellation.
            </summary>
            <param name="socket">The socket which should write data to the network.</param>
            <param name="packet">The packet that should be written to the network.</param>
            <param name="socketFlags">The socket flags associated with the send operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.WritePacketToAsync(System.Net.Sockets.Socket,System.Net.EndPoint,NetSharp.Packets.Packet,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Writes the given packet asynchronously to the given remote endpoint, via the given socket.
            The given <see cref="T:System.Net.Sockets.SocketFlags"/> are associated with the write, and the given <see cref="T:System.Threading.CancellationToken"/>
            is used to allow for asynchronous task cancellation.
            </summary>
            <param name="socket">The socket which should write data to the network.</param>
            <param name="remoteEndPoint">The remote endpoint to which data should be written.</param>
            <param name="packet">The packet that should be written to the remote endpoint.</param>
            <param name="socketFlags">The socket flags associated with the send operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
        </member>
        <member name="M:NetSharp.Utils.NetworkOperations.WriteToAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Writes the given buffer asynchronously to the given remote endpoint, via the given socket.
            The given <see cref="T:System.Net.Sockets.SocketFlags"/> are associated with the write, and the given <see cref="T:System.Threading.CancellationToken"/>
            is used to allow for asynchronous task cancellation.
            </summary>
            <param name="socket">The socket which should write data to the network.</param>
            <param name="remoteEndPoint">The remote endpoint to which data should be written.</param>
            <param name="buffer">The buffer that should be written to the network.</param>
            <param name="socketFlags">The socket flags associated with the send operation.</param>
            <param name="cancellationToken">The cancellation token to use for asynchronous cancellation.</param>
        </member>
        <member name="T:NetSharp.Utils.Socket_Options.DefaultSocketOptions">
            <summary>
            Allows for manipulation of socket options.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Socket_Options.DefaultSocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.DefaultSocketOptions.HopLimit">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
            This property is not supported when using the default socket option manager.
            </exception>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.DefaultSocketOptions.IsRoutingEnabled">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
            This property is not supported when using the default socket option manager.
            </exception>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.DefaultSocketOptions.UseLoopback">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
            This property is not supported when using the default socket option manager.
            </exception>
        </member>
        <member name="T:NetSharp.Utils.Socket_Options.SocketOptionManager">
            <summary>
            Enumerates the possible socket option manager types to instantiate for a <see cref="T:NetSharp.Client"/> and <see cref="T:NetSharp.Server"/>
            instance.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.Socket_Options.SocketOptionManager.Default">
            <summary>
            Causes a <see cref="T:NetSharp.Utils.Socket_Options.DefaultSocketOptions"/> instance to be created as the socket option manager.
            This means that certain socket options will throw an error, as the socket type is not specified.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.Socket_Options.SocketOptionManager.Tcp">
            <summary>
            Causes a <see cref="T:NetSharp.Utils.Socket_Options.TcpSocketOptions"/> instance to be created as the socket option manager.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.Socket_Options.SocketOptionManager.Udp">
            <summary>
            Causes a <see cref="T:NetSharp.Utils.Socket_Options.UdpSocketOptions"/> instance to be created as the socket option manager.
            </summary>
        </member>
        <member name="T:NetSharp.Utils.Socket_Options.SocketOptions">
            <summary>
            Allows for manipulation of socket options.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.Socket_Options.SocketOptions.managedSocket">
            <summary>
            The <see cref="T:System.Net.Sockets.Socket"/> instance whose settings are being managed.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Socket_Options.SocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.Socket_Options.SocketOptions"/> class.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> instance whose options should be managed.</param>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.DualMode">
            <summary>
            Whether this <see cref="T:System.Net.Sockets.Socket"/> can operate in dual IPv4 / IPv6 mode.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.ForceFlush">
            <summary>
            Whether sending a packet flushes underlying <see cref="T:System.Net.Sockets.NetworkStream"/>.
            </summary>
            <remarks>
            This value is only used in a <see cref="T:System.Net.Sockets.TcpClient"/> instance, which uses a <see cref="T:System.Net.Sockets.NetworkStream"/>
            to send and receive data. A <see cref="T:System.Net.Sockets.UdpClient"/> is unaffected by this value.
            </remarks>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.Fragment">
            <summary>
            Whether this <see cref="T:System.Net.Sockets.Socket"/> is allowed to fragment frames that are too large to send in one go.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.HopLimit">
            <summary>
            The hop limit for packets sent by this <see cref="T:System.Net.Sockets.Socket"/>. Comparable to IPv4s TTL (Time To Live).
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.IsChecksumEnabled">
            <summary>
            Whether a checksum should be created for each UDP packet sent.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.IsRoutingEnabled">
            <summary>
            Whether the packet should be sent directly to its destination or allowed to be routed through multiple destinations
            first.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.LocalEndPoint">
            <summary>
            The local <see cref="T:System.Net.EndPoint"/> for the <see cref="F:NetSharp.Utils.Socket_Options.SocketOptions.managedSocket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.LocalIPEndPoint">
            <summary>
            The local <see cref="T:System.Net.IPEndPoint"/> for this <see cref="T:System.Net.Sockets.Socket"/> instance.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.RemoteEndPoint">
            <summary>
            The remote <see cref="T:System.Net.EndPoint"/> for the <see cref="F:NetSharp.Utils.Socket_Options.SocketOptions.managedSocket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.RemoteIPEndPoint">
            <summary>
            The remote <see cref="T:System.Net.IPEndPoint"/> that this <see cref="T:System.Net.Sockets.Socket"/> instance communicates with.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.Ttl">
            <summary>
            The 'Time To Live' for this <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.SocketOptions.UseLoopback">
            <summary>
            Whether this <see cref="T:System.Net.Sockets.Socket"/> should use a loopback address and bypass hardware.
            </summary>
        </member>
        <member name="T:NetSharp.Utils.Socket_Options.TcpSocketOptions">
            <summary>
            Allows for manipulation of TCP socket options.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Socket_Options.TcpSocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.TcpSocketOptions.HopLimit">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.TcpSocketOptions.IsRoutingEnabled">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.TcpSocketOptions.UseLoopback">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Utils.Socket_Options.UdpSocketOptions">
            <summary>
            Allows for manipulation of UDP socket options.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.Socket_Options.UdpSocketOptions.#ctor(System.Net.Sockets.Socket@)">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.UdpSocketOptions.HopLimit">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.UdpSocketOptions.IsRoutingEnabled">
            <inheritdoc />
        </member>
        <member name="P:NetSharp.Utils.Socket_Options.UdpSocketOptions.UseLoopback">
            <inheritdoc />
        </member>
        <member name="T:NetSharp.Utils.TransmissionResult">
            <summary>
            Represents the result of a socket transmission.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Buffer">
            <summary>
            The byte buffer that was transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.Count">
            <summary>
            The number of bytes that were transmitted across the network.
            </summary>
        </member>
        <member name="F:NetSharp.Utils.TransmissionResult.RemoteEndPoint">
            <summary>
            The remote endpoint to which the buffer was transmitted.
            </summary>
        </member>
        <member name="M:NetSharp.Utils.TransmissionResult.#ctor(System.Memory{System.Byte},System.Int32,System.Net.EndPoint)">
            <summary>
            Initialises a new instance of the <see cref="T:NetSharp.Utils.TransmissionResult"/> struct.
            </summary>
            <param name="buffer">The byte buffer that was transmitted.</param>
            <param name="count">The number of bytes that were transmitted.</param>
            <param name="remoteEndPoint">The remote endpoint to which the buffer was transmitted.</param>
        </member>
    </members>
</doc>
